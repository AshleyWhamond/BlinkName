
c:/Users/ashkl/Desktop/Deakin_22/SIT_210/Week_2/task2.1/FirstNameBlinky/target/2.3.0/argon/FirstNameBlinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000014a4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d54c0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000070  2003e238  000d54c4  0001e238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000548  2003e2a8  2003e2a8  0002e2a8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d5534  000d5534  00025534  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d555c  000d555c  0002555c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   0010d754  00000000  00000000  00025560  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001212b  00000000  00000000  00132cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00021ef5  00000000  00000000  00144ddf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002118  00000000  00000000  00166cd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00006250  00000000  00000000  00168dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00033cc7  00000000  00000000  0016f03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d104  00000000  00000000  001a2d03  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010643e  00000000  00000000  001cfe07  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006aa8  00000000  00000000  002d6248  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 f889 	bl	d5144 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 f891 	bl	d5160 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e238 	.word	0x2003e238
   d4048:	000d54c4 	.word	0x000d54c4
   d404c:	2003e2a8 	.word	0x2003e2a8
   d4050:	2003e2a8 	.word	0x2003e2a8
   d4054:	2003e7ed 	.word	0x2003e7ed

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f000 fc79 	bl	d4954 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d5498 	.word	0x000d5498
   d407c:	000d54bc 	.word	0x000d54bc

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b878 	b.w	d4174 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f87d 	bl	d4184 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bc19 	b.w	d48c4 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f000 bb0d 	b.w	d46b0 <malloc>

000d4096 <_Znaj>:
   d4096:	f000 bb0b 	b.w	d46b0 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f000 bb11 	b.w	d46c0 <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>:

      pointer
      _M_local_data()
      {
#if __cplusplus >= 201103L
	return std::pointer_traits<pointer>::pointer_to(*_M_local_buf);
   d40ae:	f100 0308 	add.w	r3, r0, #8
#if __cpp_deduction_guides && ! defined _GLIBCXX_DEFINING_STRING_INSTANTIATIONS
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 3076. basic_string CTAD ambiguity
      template<typename = _RequireAllocator<_Alloc>>
#endif
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   d40b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
	: allocator_type(__a), _M_p(__dat) { }
   d40b4:	6003      	str	r3, [r0, #0]
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
   d40b6:	4604      	mov	r4, r0
      {
#if __cplusplus >= 201703L
	if (__constant_string_p(__s))
	  return __gnu_cxx::char_traits<char_type>::length(__s);
#endif
	return __builtin_strlen(__s);
   d40b8:	4608      	mov	r0, r1
   d40ba:	460d      	mov	r5, r1
   d40bc:	f001 f87c 	bl	d51b8 <strlen>
	  std::__throw_logic_error(__N("basic_string::"
				       "_M_construct null not valid"));

	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));

	if (__dnew > size_type(_S_local_capacity))
   d40c0:	280f      	cmp	r0, #15
      : _M_dataplus(_M_local_data(), __a)
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   d40c2:	eb05 0600 	add.w	r6, r5, r0
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
   d40c6:	9001      	str	r0, [sp, #4]
	if (__dnew > size_type(_S_local_capacity))
   d40c8:	d907      	bls.n	d40da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0+0x2c>
	  {
	    _M_data(_M_create(__dnew, size_type(0)));
   d40ca:	2200      	movs	r2, #0
   d40cc:	a901      	add	r1, sp, #4
   d40ce:	4620      	mov	r0, r4
   d40d0:	f000 ffb8 	bl	d5044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
      { _M_allocated_capacity = __capacity; }
   d40d4:	9b01      	ldr	r3, [sp, #4]
      { _M_dataplus._M_p = __p; }
   d40d6:	6020      	str	r0, [r4, #0]
      { _M_allocated_capacity = __capacity; }
   d40d8:	60a3      	str	r3, [r4, #8]
	    _M_capacity(__dnew);
	  }

	// Check for out_of_range and length_error exceptions.
	__try
	  { this->_S_copy_chars(_M_data(), __beg, __end); }
   d40da:	6820      	ldr	r0, [r4, #0]
   d40dc:	4632      	mov	r2, r6
   d40de:	4629      	mov	r1, r5
   d40e0:	f000 ffe8 	bl	d50b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
	  {
	    _M_dispose();
	    __throw_exception_again;
	  }

	_M_set_length(__dnew);
   d40e4:	9b01      	ldr	r3, [sp, #4]
      { __c1 = __c2; }
   d40e6:	6822      	ldr	r2, [r4, #0]
      { _M_string_length = __length; }
   d40e8:	6063      	str	r3, [r4, #4]
   d40ea:	2100      	movs	r1, #0
      { _M_construct(__s, __s ? __s + traits_type::length(__s) : __s+npos); }
   d40ec:	4620      	mov	r0, r4
   d40ee:	54d1      	strb	r1, [r2, r3]
   d40f0:	b002      	add	sp, #8
   d40f2:	bd70      	pop	{r4, r5, r6, pc}

000d40f4 <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

const int arrLength = 6;
std::string FIRST_NAME[arrLength] = {A, S, H, L, E, Y};

void transLetter(std::string letter)
{
   d40f4:	b570      	push	{r4, r5, r6, lr}
   d40f6:	4e14      	ldr	r6, [pc, #80]	; (d4148 <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x54>)
   d40f8:	4605      	mov	r5, r0
  for (unsigned int i = 0; i < letter.length(); i++)
   d40fa:	2400      	movs	r4, #0
   d40fc:	686b      	ldr	r3, [r5, #4]
   d40fe:	429c      	cmp	r4, r3
   d4100:	d21b      	bcs.n	d413a <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x46>
  {
    //Particle.publish("letter", letter[0]);
    if (letter[i] == '.')
   d4102:	682b      	ldr	r3, [r5, #0]
   d4104:	8830      	ldrh	r0, [r6, #0]
   d4106:	5d1b      	ldrb	r3, [r3, r4]
   d4108:	2b2e      	cmp	r3, #46	; 0x2e
    {
      digitalWrite(light, HIGH); // turn the LED on (HIGH is the voltage level)
   d410a:	f04f 0101 	mov.w	r1, #1
    if (letter[i] == '.')
   d410e:	d10f      	bne.n	d4130 <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x3c>
      digitalWrite(light, HIGH); // turn the LED on (HIGH is the voltage level)
   d4110:	f000 ff39 	bl	d4f86 <digitalWrite>
      delay(DOT);                // display for length of DOT
   d4114:	f44f 7096 	mov.w	r0, #300	; 0x12c
      delay(CHAR_SPACE);         // wait for length of
    }
    else
    {
      digitalWrite(light, HIGH); // turn the LED on (HIGH is the voltage level)
      delay(DASH);               // display for length of DOT
   d4118:	f000 fba8 	bl	d486c <delay>
      digitalWrite(light, LOW);  // turn the LED off by making the voltage LOW
   d411c:	8830      	ldrh	r0, [r6, #0]
   d411e:	2100      	movs	r1, #0
   d4120:	f000 ff31 	bl	d4f86 <digitalWrite>
      delay(CHAR_SPACE);         // wait for length of
   d4124:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d4128:	f000 fba0 	bl	d486c <delay>
  for (unsigned int i = 0; i < letter.length(); i++)
   d412c:	3401      	adds	r4, #1
   d412e:	e7e5      	b.n	d40fc <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x8>
      digitalWrite(light, HIGH); // turn the LED on (HIGH is the voltage level)
   d4130:	f000 ff29 	bl	d4f86 <digitalWrite>
      delay(DASH);               // display for length of DOT
   d4134:	f44f 7061 	mov.w	r0, #900	; 0x384
   d4138:	e7ee      	b.n	d4118 <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0x24>
    }
  }
  delay(LETTER_SPACE);
}
   d413a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  delay(LETTER_SPACE);
   d413e:	f44f 7061 	mov.w	r0, #900	; 0x384
   d4142:	f000 bb93 	b.w	d486c <delay>
   d4146:	bf00      	nop
   d4148:	2003e238 	.word	0x2003e238

000d414c <_Z11displayWordPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

void displayWord(std::string word[arrLength]){
   d414c:	b530      	push	{r4, r5, lr}
   d414e:	4604      	mov	r4, r0
   d4150:	b087      	sub	sp, #28
   d4152:	f100 0590 	add.w	r5, r0, #144	; 0x90
 
  for(int i = 0; i < arrLength; i++)
  {
    transLetter(word[i]);
   d4156:	4621      	mov	r1, r4
   d4158:	4668      	mov	r0, sp
   d415a:	f000 ffd5 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d415e:	4668      	mov	r0, sp
   d4160:	f7ff ffc8 	bl	d40f4 <_Z11transLetterNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
#endif // C++17

      /**
       *  @brief  Destroy the string instance.
       */
      ~basic_string()
   d4164:	3418      	adds	r4, #24
      { _M_dispose(); }
   d4166:	4668      	mov	r0, sp
   d4168:	f000 ff8e 	bl	d5088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
  for(int i = 0; i < arrLength; i++)
   d416c:	42ac      	cmp	r4, r5
   d416e:	d1f2      	bne.n	d4156 <_Z11displayWordPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE+0xa>
  }

}
   d4170:	b007      	add	sp, #28
   d4172:	bd30      	pop	{r4, r5, pc}

000d4174 <setup>:

void setup()
{
  pinMode(light, OUTPUT);
   d4174:	4b02      	ldr	r3, [pc, #8]	; (d4180 <setup+0xc>)
   d4176:	2101      	movs	r1, #1
   d4178:	8818      	ldrh	r0, [r3, #0]
   d417a:	f000 bef3 	b.w	d4f64 <pinMode>
   d417e:	bf00      	nop
   d4180:	2003e238 	.word	0x2003e238

000d4184 <loop>:
}

// the loop function runs over and over again forever
void loop()
{
   d4184:	b508      	push	{r3, lr}
  displayWord(FIRST_NAME);
   d4186:	4804      	ldr	r0, [pc, #16]	; (d4198 <loop+0x14>)
   d4188:	f7ff ffe0 	bl	d414c <_Z11displayWordPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
  delay(END_WORD);
}
   d418c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(END_WORD);
   d4190:	f640 0034 	movw	r0, #2100	; 0x834
   d4194:	f000 bb6a 	b.w	d486c <delay>
   d4198:	2003e2a8 	.word	0x2003e2a8

000d419c <_GLOBAL__sub_I_light>:
}
   d419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
const std::string A = ".-";
   d41a0:	f8df a1e8 	ldr.w	sl, [pc, #488]	; d438c <_GLOBAL__sub_I_light+0x1f0>
   d41a4:	4947      	ldr	r1, [pc, #284]	; (d42c4 <_GLOBAL__sub_I_light+0x128>)
const std::string E = ".";
   d41a6:	4e48      	ldr	r6, [pc, #288]	; (d42c8 <_GLOBAL__sub_I_light+0x12c>)
const std::string H = "....";
   d41a8:	f8df 81e4 	ldr.w	r8, [pc, #484]	; d4390 <_GLOBAL__sub_I_light+0x1f4>
const std::string L = ".-..";
   d41ac:	4f47      	ldr	r7, [pc, #284]	; (d42cc <_GLOBAL__sub_I_light+0x130>)
const std::string S = "...";
   d41ae:	f8df 91e4 	ldr.w	r9, [pc, #484]	; d4394 <_GLOBAL__sub_I_light+0x1f8>
const std::string Y = "-.--";
   d41b2:	4d47      	ldr	r5, [pc, #284]	; (d42d0 <_GLOBAL__sub_I_light+0x134>)
std::string FIRST_NAME[arrLength] = {A, S, H, L, E, Y};
   d41b4:	4c47      	ldr	r4, [pc, #284]	; (d42d4 <_GLOBAL__sub_I_light+0x138>)
const std::string A = ".-";
   d41b6:	4650      	mov	r0, sl
   d41b8:	f7ff ff79 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string B = "-...";
   d41bc:	4946      	ldr	r1, [pc, #280]	; (d42d8 <_GLOBAL__sub_I_light+0x13c>)
   d41be:	4847      	ldr	r0, [pc, #284]	; (d42dc <_GLOBAL__sub_I_light+0x140>)
   d41c0:	f7ff ff75 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string C = "-.-.";
   d41c4:	4946      	ldr	r1, [pc, #280]	; (d42e0 <_GLOBAL__sub_I_light+0x144>)
   d41c6:	4847      	ldr	r0, [pc, #284]	; (d42e4 <_GLOBAL__sub_I_light+0x148>)
   d41c8:	f7ff ff71 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string D = "-..";
   d41cc:	4946      	ldr	r1, [pc, #280]	; (d42e8 <_GLOBAL__sub_I_light+0x14c>)
   d41ce:	4847      	ldr	r0, [pc, #284]	; (d42ec <_GLOBAL__sub_I_light+0x150>)
   d41d0:	f7ff ff6d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string E = ".";
   d41d4:	4946      	ldr	r1, [pc, #280]	; (d42f0 <_GLOBAL__sub_I_light+0x154>)
   d41d6:	4630      	mov	r0, r6
   d41d8:	f7ff ff69 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string F = "..-.";
   d41dc:	4945      	ldr	r1, [pc, #276]	; (d42f4 <_GLOBAL__sub_I_light+0x158>)
   d41de:	4846      	ldr	r0, [pc, #280]	; (d42f8 <_GLOBAL__sub_I_light+0x15c>)
   d41e0:	f7ff ff65 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string G = "--.";
   d41e4:	4945      	ldr	r1, [pc, #276]	; (d42fc <_GLOBAL__sub_I_light+0x160>)
   d41e6:	4846      	ldr	r0, [pc, #280]	; (d4300 <_GLOBAL__sub_I_light+0x164>)
   d41e8:	f7ff ff61 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string H = "....";
   d41ec:	4945      	ldr	r1, [pc, #276]	; (d4304 <_GLOBAL__sub_I_light+0x168>)
   d41ee:	4640      	mov	r0, r8
   d41f0:	f7ff ff5d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string I = "..";
   d41f4:	4944      	ldr	r1, [pc, #272]	; (d4308 <_GLOBAL__sub_I_light+0x16c>)
   d41f6:	4845      	ldr	r0, [pc, #276]	; (d430c <_GLOBAL__sub_I_light+0x170>)
   d41f8:	f7ff ff59 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string J = ".---";
   d41fc:	4944      	ldr	r1, [pc, #272]	; (d4310 <_GLOBAL__sub_I_light+0x174>)
   d41fe:	4845      	ldr	r0, [pc, #276]	; (d4314 <_GLOBAL__sub_I_light+0x178>)
   d4200:	f7ff ff55 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string K = "-.-";
   d4204:	4944      	ldr	r1, [pc, #272]	; (d4318 <_GLOBAL__sub_I_light+0x17c>)
   d4206:	4845      	ldr	r0, [pc, #276]	; (d431c <_GLOBAL__sub_I_light+0x180>)
   d4208:	f7ff ff51 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string L = ".-..";
   d420c:	4944      	ldr	r1, [pc, #272]	; (d4320 <_GLOBAL__sub_I_light+0x184>)
   d420e:	4638      	mov	r0, r7
   d4210:	f7ff ff4d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string M = "--";
   d4214:	4943      	ldr	r1, [pc, #268]	; (d4324 <_GLOBAL__sub_I_light+0x188>)
   d4216:	4844      	ldr	r0, [pc, #272]	; (d4328 <_GLOBAL__sub_I_light+0x18c>)
   d4218:	f7ff ff49 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string N = "-.";
   d421c:	4943      	ldr	r1, [pc, #268]	; (d432c <_GLOBAL__sub_I_light+0x190>)
   d421e:	4844      	ldr	r0, [pc, #272]	; (d4330 <_GLOBAL__sub_I_light+0x194>)
   d4220:	f7ff ff45 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string O = "---";
   d4224:	4943      	ldr	r1, [pc, #268]	; (d4334 <_GLOBAL__sub_I_light+0x198>)
   d4226:	4844      	ldr	r0, [pc, #272]	; (d4338 <_GLOBAL__sub_I_light+0x19c>)
   d4228:	f7ff ff41 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string P = ".--.";
   d422c:	4943      	ldr	r1, [pc, #268]	; (d433c <_GLOBAL__sub_I_light+0x1a0>)
   d422e:	4844      	ldr	r0, [pc, #272]	; (d4340 <_GLOBAL__sub_I_light+0x1a4>)
   d4230:	f7ff ff3d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string Q = "--.-";
   d4234:	4943      	ldr	r1, [pc, #268]	; (d4344 <_GLOBAL__sub_I_light+0x1a8>)
   d4236:	4844      	ldr	r0, [pc, #272]	; (d4348 <_GLOBAL__sub_I_light+0x1ac>)
   d4238:	f7ff ff39 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string R = ".-.";
   d423c:	4943      	ldr	r1, [pc, #268]	; (d434c <_GLOBAL__sub_I_light+0x1b0>)
   d423e:	4844      	ldr	r0, [pc, #272]	; (d4350 <_GLOBAL__sub_I_light+0x1b4>)
   d4240:	f7ff ff35 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string S = "...";
   d4244:	4943      	ldr	r1, [pc, #268]	; (d4354 <_GLOBAL__sub_I_light+0x1b8>)
   d4246:	4648      	mov	r0, r9
   d4248:	f7ff ff31 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string T = "-";
   d424c:	4942      	ldr	r1, [pc, #264]	; (d4358 <_GLOBAL__sub_I_light+0x1bc>)
   d424e:	4843      	ldr	r0, [pc, #268]	; (d435c <_GLOBAL__sub_I_light+0x1c0>)
   d4250:	f7ff ff2d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string U = "..-";
   d4254:	4942      	ldr	r1, [pc, #264]	; (d4360 <_GLOBAL__sub_I_light+0x1c4>)
   d4256:	4843      	ldr	r0, [pc, #268]	; (d4364 <_GLOBAL__sub_I_light+0x1c8>)
   d4258:	f7ff ff29 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string V = "...-";
   d425c:	4942      	ldr	r1, [pc, #264]	; (d4368 <_GLOBAL__sub_I_light+0x1cc>)
   d425e:	4843      	ldr	r0, [pc, #268]	; (d436c <_GLOBAL__sub_I_light+0x1d0>)
   d4260:	f7ff ff25 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string W = ".--";
   d4264:	4942      	ldr	r1, [pc, #264]	; (d4370 <_GLOBAL__sub_I_light+0x1d4>)
   d4266:	4843      	ldr	r0, [pc, #268]	; (d4374 <_GLOBAL__sub_I_light+0x1d8>)
   d4268:	f7ff ff21 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string X = "-..-";
   d426c:	4942      	ldr	r1, [pc, #264]	; (d4378 <_GLOBAL__sub_I_light+0x1dc>)
   d426e:	4843      	ldr	r0, [pc, #268]	; (d437c <_GLOBAL__sub_I_light+0x1e0>)
   d4270:	f7ff ff1d 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string Y = "-.--";
   d4274:	4942      	ldr	r1, [pc, #264]	; (d4380 <_GLOBAL__sub_I_light+0x1e4>)
   d4276:	4628      	mov	r0, r5
   d4278:	f7ff ff19 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
const std::string Z = "--..";
   d427c:	4941      	ldr	r1, [pc, #260]	; (d4384 <_GLOBAL__sub_I_light+0x1e8>)
   d427e:	4842      	ldr	r0, [pc, #264]	; (d4388 <_GLOBAL__sub_I_light+0x1ec>)
   d4280:	f7ff ff15 	bl	d40ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.isra.0>
std::string FIRST_NAME[arrLength] = {A, S, H, L, E, Y};
   d4284:	4651      	mov	r1, sl
   d4286:	4620      	mov	r0, r4
   d4288:	f000 ff3e 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d428c:	4649      	mov	r1, r9
   d428e:	f104 0018 	add.w	r0, r4, #24
   d4292:	f000 ff39 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d4296:	4641      	mov	r1, r8
   d4298:	f104 0030 	add.w	r0, r4, #48	; 0x30
   d429c:	f000 ff34 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d42a0:	4639      	mov	r1, r7
   d42a2:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d42a6:	f000 ff2f 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d42aa:	4631      	mov	r1, r6
   d42ac:	f104 0060 	add.w	r0, r4, #96	; 0x60
   d42b0:	f000 ff2a 	bl	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d42b4:	4629      	mov	r1, r5
   d42b6:	f104 0078 	add.w	r0, r4, #120	; 0x78
}
   d42ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
std::string FIRST_NAME[arrLength] = {A, S, H, L, E, Y};
   d42be:	f000 bf23 	b.w	d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
   d42c2:	bf00      	nop
   d42c4:	000d52cd 	.word	0x000d52cd
   d42c8:	2003e398 	.word	0x2003e398
   d42cc:	2003e440 	.word	0x2003e440
   d42d0:	2003e578 	.word	0x2003e578
   d42d4:	2003e2a8 	.word	0x2003e2a8
   d42d8:	000d52a8 	.word	0x000d52a8
   d42dc:	2003e350 	.word	0x2003e350
   d42e0:	000d52ad 	.word	0x000d52ad
   d42e4:	2003e368 	.word	0x2003e368
   d42e8:	000d52e0 	.word	0x000d52e0
   d42ec:	2003e380 	.word	0x2003e380
   d42f0:	000d52c9 	.word	0x000d52c9
   d42f4:	000d52b2 	.word	0x000d52b2
   d42f8:	2003e3b0 	.word	0x2003e3b0
   d42fc:	000d52c7 	.word	0x000d52c7
   d4300:	2003e3c8 	.word	0x2003e3c8
   d4304:	000d52b7 	.word	0x000d52b7
   d4308:	000d52e1 	.word	0x000d52e1
   d430c:	2003e3f8 	.word	0x2003e3f8
   d4310:	000d52bc 	.word	0x000d52bc
   d4314:	2003e410 	.word	0x2003e410
   d4318:	000d52cc 	.word	0x000d52cc
   d431c:	2003e428 	.word	0x2003e428
   d4320:	000d52c1 	.word	0x000d52c1
   d4324:	000d52be 	.word	0x000d52be
   d4328:	2003e458 	.word	0x2003e458
   d432c:	000d52c8 	.word	0x000d52c8
   d4330:	2003e470 	.word	0x2003e470
   d4334:	000d52bd 	.word	0x000d52bd
   d4338:	2003e488 	.word	0x2003e488
   d433c:	000d52c6 	.word	0x000d52c6
   d4340:	2003e4a0 	.word	0x2003e4a0
   d4344:	000d52cb 	.word	0x000d52cb
   d4348:	2003e4b8 	.word	0x2003e4b8
   d434c:	000d52ae 	.word	0x000d52ae
   d4350:	2003e4d0 	.word	0x2003e4d0
   d4354:	000d52a9 	.word	0x000d52a9
   d4358:	000d52bf 	.word	0x000d52bf
   d435c:	2003e500 	.word	0x2003e500
   d4360:	000d52d6 	.word	0x000d52d6
   d4364:	2003e518 	.word	0x2003e518
   d4368:	000d52d0 	.word	0x000d52d0
   d436c:	2003e530 	.word	0x2003e530
   d4370:	000d52db 	.word	0x000d52db
   d4374:	2003e548 	.word	0x2003e548
   d4378:	000d52d5 	.word	0x000d52d5
   d437c:	2003e560 	.word	0x2003e560
   d4380:	000d52da 	.word	0x000d52da
   d4384:	000d52df 	.word	0x000d52df
   d4388:	2003e590 	.word	0x2003e590
   d438c:	2003e338 	.word	0x2003e338
   d4390:	2003e3e0 	.word	0x2003e3e0
   d4394:	2003e4e8 	.word	0x2003e4e8

000d4398 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4398:	b508      	push	{r3, lr}
   d439a:	4b02      	ldr	r3, [pc, #8]	; (d43a4 <netdb_freeaddrinfo+0xc>)
   d439c:	681b      	ldr	r3, [r3, #0]
   d439e:	689b      	ldr	r3, [r3, #8]
   d43a0:	9301      	str	r3, [sp, #4]
   d43a2:	bd08      	pop	{r3, pc}
   d43a4:	00030268 	.word	0x00030268

000d43a8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d43a8:	b508      	push	{r3, lr}
   d43aa:	4b02      	ldr	r3, [pc, #8]	; (d43b4 <netdb_getaddrinfo+0xc>)
   d43ac:	681b      	ldr	r3, [r3, #0]
   d43ae:	68db      	ldr	r3, [r3, #12]
   d43b0:	9301      	str	r3, [sp, #4]
   d43b2:	bd08      	pop	{r3, pc}
   d43b4:	00030268 	.word	0x00030268

000d43b8 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d43b8:	b508      	push	{r3, lr}
   d43ba:	4b02      	ldr	r3, [pc, #8]	; (d43c4 <HAL_Pin_Mode+0xc>)
   d43bc:	681b      	ldr	r3, [r3, #0]
   d43be:	689b      	ldr	r3, [r3, #8]
   d43c0:	9301      	str	r3, [sp, #4]
   d43c2:	bd08      	pop	{r3, pc}
   d43c4:	0003022c 	.word	0x0003022c

000d43c8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d43c8:	b508      	push	{r3, lr}
   d43ca:	4b02      	ldr	r3, [pc, #8]	; (d43d4 <HAL_Get_Pin_Mode+0xc>)
   d43cc:	681b      	ldr	r3, [r3, #0]
   d43ce:	68db      	ldr	r3, [r3, #12]
   d43d0:	9301      	str	r3, [sp, #4]
   d43d2:	bd08      	pop	{r3, pc}
   d43d4:	0003022c 	.word	0x0003022c

000d43d8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d43d8:	b508      	push	{r3, lr}
   d43da:	4b02      	ldr	r3, [pc, #8]	; (d43e4 <HAL_GPIO_Write+0xc>)
   d43dc:	681b      	ldr	r3, [r3, #0]
   d43de:	691b      	ldr	r3, [r3, #16]
   d43e0:	9301      	str	r3, [sp, #4]
   d43e2:	bd08      	pop	{r3, pc}
   d43e4:	0003022c 	.word	0x0003022c

000d43e8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d43e8:	b508      	push	{r3, lr}
   d43ea:	4b02      	ldr	r3, [pc, #8]	; (d43f4 <HAL_RNG_GetRandomNumber+0xc>)
   d43ec:	681b      	ldr	r3, [r3, #0]
   d43ee:	685b      	ldr	r3, [r3, #4]
   d43f0:	9301      	str	r3, [sp, #4]
   d43f2:	bd08      	pop	{r3, pc}
   d43f4:	00030218 	.word	0x00030218

000d43f8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d43f8:	b508      	push	{r3, lr}
   d43fa:	4b02      	ldr	r3, [pc, #8]	; (d4404 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d43fc:	681b      	ldr	r3, [r3, #0]
   d43fe:	695b      	ldr	r3, [r3, #20]
   d4400:	9301      	str	r3, [sp, #4]
   d4402:	bd08      	pop	{r3, pc}
   d4404:	00030218 	.word	0x00030218

000d4408 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4408:	b508      	push	{r3, lr}
   d440a:	4b02      	ldr	r3, [pc, #8]	; (d4414 <os_mutex_recursive_create+0xc>)
   d440c:	681b      	ldr	r3, [r3, #0]
   d440e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4410:	9301      	str	r3, [sp, #4]
   d4412:	bd08      	pop	{r3, pc}
   d4414:	00030248 	.word	0x00030248

000d4418 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4418:	b508      	push	{r3, lr}
   d441a:	4b02      	ldr	r3, [pc, #8]	; (d4424 <inet_inet_ntop+0xc>)
   d441c:	681b      	ldr	r3, [r3, #0]
   d441e:	695b      	ldr	r3, [r3, #20]
   d4420:	9301      	str	r3, [sp, #4]
   d4422:	bd08      	pop	{r3, pc}
   d4424:	00030264 	.word	0x00030264

000d4428 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4428:	b508      	push	{r3, lr}
   d442a:	4b02      	ldr	r3, [pc, #8]	; (d4434 <hal_usart_init+0xc>)
   d442c:	681b      	ldr	r3, [r3, #0]
   d442e:	681b      	ldr	r3, [r3, #0]
   d4430:	9301      	str	r3, [sp, #4]
   d4432:	bd08      	pop	{r3, pc}
   d4434:	0003023c 	.word	0x0003023c

000d4438 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <hal_usart_write+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	68db      	ldr	r3, [r3, #12]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	0003023c 	.word	0x0003023c

000d4448 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <hal_usart_available+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	691b      	ldr	r3, [r3, #16]
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	0003023c 	.word	0x0003023c

000d4458 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <hal_usart_read+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	695b      	ldr	r3, [r3, #20]
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	0003023c 	.word	0x0003023c

000d4468 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b02      	ldr	r3, [pc, #8]	; (d4474 <hal_usart_peek+0xc>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	699b      	ldr	r3, [r3, #24]
   d4470:	9301      	str	r3, [sp, #4]
   d4472:	bd08      	pop	{r3, pc}
   d4474:	0003023c 	.word	0x0003023c

000d4478 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4478:	b508      	push	{r3, lr}
   d447a:	4b02      	ldr	r3, [pc, #8]	; (d4484 <hal_usart_flush+0xc>)
   d447c:	681b      	ldr	r3, [r3, #0]
   d447e:	69db      	ldr	r3, [r3, #28]
   d4480:	9301      	str	r3, [sp, #4]
   d4482:	bd08      	pop	{r3, pc}
   d4484:	0003023c 	.word	0x0003023c

000d4488 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4488:	b508      	push	{r3, lr}
   d448a:	4b02      	ldr	r3, [pc, #8]	; (d4494 <hal_usart_is_enabled+0xc>)
   d448c:	681b      	ldr	r3, [r3, #0]
   d448e:	6a1b      	ldr	r3, [r3, #32]
   d4490:	9301      	str	r3, [sp, #4]
   d4492:	bd08      	pop	{r3, pc}
   d4494:	0003023c 	.word	0x0003023c

000d4498 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4498:	b508      	push	{r3, lr}
   d449a:	4b02      	ldr	r3, [pc, #8]	; (d44a4 <hal_usart_available_data_for_write+0xc>)
   d449c:	681b      	ldr	r3, [r3, #0]
   d449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44a0:	9301      	str	r3, [sp, #4]
   d44a2:	bd08      	pop	{r3, pc}
   d44a4:	0003023c 	.word	0x0003023c

000d44a8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d44a8:	b508      	push	{r3, lr}
   d44aa:	4b02      	ldr	r3, [pc, #8]	; (d44b4 <hal_i2c_write+0xc>)
   d44ac:	681b      	ldr	r3, [r3, #0]
   d44ae:	6a1b      	ldr	r3, [r3, #32]
   d44b0:	9301      	str	r3, [sp, #4]
   d44b2:	bd08      	pop	{r3, pc}
   d44b4:	00030228 	.word	0x00030228

000d44b8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d44b8:	b508      	push	{r3, lr}
   d44ba:	4b02      	ldr	r3, [pc, #8]	; (d44c4 <hal_i2c_available+0xc>)
   d44bc:	681b      	ldr	r3, [r3, #0]
   d44be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d44c0:	9301      	str	r3, [sp, #4]
   d44c2:	bd08      	pop	{r3, pc}
   d44c4:	00030228 	.word	0x00030228

000d44c8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d44c8:	b508      	push	{r3, lr}
   d44ca:	4b02      	ldr	r3, [pc, #8]	; (d44d4 <hal_i2c_read+0xc>)
   d44cc:	681b      	ldr	r3, [r3, #0]
   d44ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d44d0:	9301      	str	r3, [sp, #4]
   d44d2:	bd08      	pop	{r3, pc}
   d44d4:	00030228 	.word	0x00030228

000d44d8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d44d8:	b508      	push	{r3, lr}
   d44da:	4b02      	ldr	r3, [pc, #8]	; (d44e4 <hal_i2c_peek+0xc>)
   d44dc:	681b      	ldr	r3, [r3, #0]
   d44de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d44e0:	9301      	str	r3, [sp, #4]
   d44e2:	bd08      	pop	{r3, pc}
   d44e4:	00030228 	.word	0x00030228

000d44e8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d44e8:	b508      	push	{r3, lr}
   d44ea:	4b02      	ldr	r3, [pc, #8]	; (d44f4 <hal_i2c_flush+0xc>)
   d44ec:	681b      	ldr	r3, [r3, #0]
   d44ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d44f0:	9301      	str	r3, [sp, #4]
   d44f2:	bd08      	pop	{r3, pc}
   d44f4:	00030228 	.word	0x00030228

000d44f8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d44f8:	b508      	push	{r3, lr}
   d44fa:	4b02      	ldr	r3, [pc, #8]	; (d4504 <hal_i2c_is_enabled+0xc>)
   d44fc:	681b      	ldr	r3, [r3, #0]
   d44fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4500:	9301      	str	r3, [sp, #4]
   d4502:	bd08      	pop	{r3, pc}
   d4504:	00030228 	.word	0x00030228

000d4508 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4508:	b508      	push	{r3, lr}
   d450a:	4b02      	ldr	r3, [pc, #8]	; (d4514 <hal_i2c_init+0xc>)
   d450c:	681b      	ldr	r3, [r3, #0]
   d450e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4510:	9301      	str	r3, [sp, #4]
   d4512:	bd08      	pop	{r3, pc}
   d4514:	00030228 	.word	0x00030228

000d4518 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d4518:	b508      	push	{r3, lr}
   d451a:	4b02      	ldr	r3, [pc, #8]	; (d4524 <hal_spi_init+0xc>)
   d451c:	681b      	ldr	r3, [r3, #0]
   d451e:	69db      	ldr	r3, [r3, #28]
   d4520:	9301      	str	r3, [sp, #4]
   d4522:	bd08      	pop	{r3, pc}
   d4524:	00030230 	.word	0x00030230

000d4528 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d4528:	b508      	push	{r3, lr}
   d452a:	4b02      	ldr	r3, [pc, #8]	; (d4534 <hal_spi_is_enabled+0xc>)
   d452c:	681b      	ldr	r3, [r3, #0]
   d452e:	6a1b      	ldr	r3, [r3, #32]
   d4530:	9301      	str	r3, [sp, #4]
   d4532:	bd08      	pop	{r3, pc}
   d4534:	00030230 	.word	0x00030230

000d4538 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4538:	b508      	push	{r3, lr}
   d453a:	4b02      	ldr	r3, [pc, #8]	; (d4544 <HAL_USB_USART_Init+0xc>)
   d453c:	681b      	ldr	r3, [r3, #0]
   d453e:	681b      	ldr	r3, [r3, #0]
   d4540:	9301      	str	r3, [sp, #4]
   d4542:	bd08      	pop	{r3, pc}
   d4544:	0003024c 	.word	0x0003024c

000d4548 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4548:	b508      	push	{r3, lr}
   d454a:	4b02      	ldr	r3, [pc, #8]	; (d4554 <HAL_USB_USART_Available_Data+0xc>)
   d454c:	681b      	ldr	r3, [r3, #0]
   d454e:	691b      	ldr	r3, [r3, #16]
   d4550:	9301      	str	r3, [sp, #4]
   d4552:	bd08      	pop	{r3, pc}
   d4554:	0003024c 	.word	0x0003024c

000d4558 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4558:	b508      	push	{r3, lr}
   d455a:	4b02      	ldr	r3, [pc, #8]	; (d4564 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d455c:	681b      	ldr	r3, [r3, #0]
   d455e:	695b      	ldr	r3, [r3, #20]
   d4560:	9301      	str	r3, [sp, #4]
   d4562:	bd08      	pop	{r3, pc}
   d4564:	0003024c 	.word	0x0003024c

000d4568 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4568:	b508      	push	{r3, lr}
   d456a:	4b02      	ldr	r3, [pc, #8]	; (d4574 <HAL_USB_USART_Receive_Data+0xc>)
   d456c:	681b      	ldr	r3, [r3, #0]
   d456e:	699b      	ldr	r3, [r3, #24]
   d4570:	9301      	str	r3, [sp, #4]
   d4572:	bd08      	pop	{r3, pc}
   d4574:	0003024c 	.word	0x0003024c

000d4578 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4578:	b508      	push	{r3, lr}
   d457a:	4b02      	ldr	r3, [pc, #8]	; (d4584 <HAL_USB_USART_Send_Data+0xc>)
   d457c:	681b      	ldr	r3, [r3, #0]
   d457e:	69db      	ldr	r3, [r3, #28]
   d4580:	9301      	str	r3, [sp, #4]
   d4582:	bd08      	pop	{r3, pc}
   d4584:	0003024c 	.word	0x0003024c

000d4588 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4588:	b508      	push	{r3, lr}
   d458a:	4b02      	ldr	r3, [pc, #8]	; (d4594 <HAL_USB_USART_Flush_Data+0xc>)
   d458c:	681b      	ldr	r3, [r3, #0]
   d458e:	6a1b      	ldr	r3, [r3, #32]
   d4590:	9301      	str	r3, [sp, #4]
   d4592:	bd08      	pop	{r3, pc}
   d4594:	0003024c 	.word	0x0003024c

000d4598 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4598:	b508      	push	{r3, lr}
   d459a:	4b02      	ldr	r3, [pc, #8]	; (d45a4 <set_system_mode+0xc>)
   d459c:	681b      	ldr	r3, [r3, #0]
   d459e:	685b      	ldr	r3, [r3, #4]
   d45a0:	9301      	str	r3, [sp, #4]
   d45a2:	bd08      	pop	{r3, pc}
   d45a4:	00030220 	.word	0x00030220

000d45a8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d45a8:	b508      	push	{r3, lr}
   d45aa:	4b02      	ldr	r3, [pc, #8]	; (d45b4 <system_delay_ms+0xc>)
   d45ac:	681b      	ldr	r3, [r3, #0]
   d45ae:	695b      	ldr	r3, [r3, #20]
   d45b0:	9301      	str	r3, [sp, #4]
   d45b2:	bd08      	pop	{r3, pc}
   d45b4:	00030220 	.word	0x00030220

000d45b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d45b8:	b508      	push	{r3, lr}
   d45ba:	4b03      	ldr	r3, [pc, #12]	; (d45c8 <system_ctrl_set_app_request_handler+0x10>)
   d45bc:	681b      	ldr	r3, [r3, #0]
   d45be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d45c2:	9301      	str	r3, [sp, #4]
   d45c4:	bd08      	pop	{r3, pc}
   d45c6:	0000      	.short	0x0000
   d45c8:	00030220 	.word	0x00030220

000d45cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d45cc:	b508      	push	{r3, lr}
   d45ce:	4b03      	ldr	r3, [pc, #12]	; (d45dc <system_ctrl_set_result+0x10>)
   d45d0:	681b      	ldr	r3, [r3, #0]
   d45d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d45d6:	9301      	str	r3, [sp, #4]
   d45d8:	bd08      	pop	{r3, pc}
   d45da:	0000      	.short	0x0000
   d45dc:	00030220 	.word	0x00030220

000d45e0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d45e0:	b508      	push	{r3, lr}
   d45e2:	4b02      	ldr	r3, [pc, #8]	; (d45ec <network_connect+0xc>)
   d45e4:	681b      	ldr	r3, [r3, #0]
   d45e6:	685b      	ldr	r3, [r3, #4]
   d45e8:	9301      	str	r3, [sp, #4]
   d45ea:	bd08      	pop	{r3, pc}
   d45ec:	00030240 	.word	0x00030240

000d45f0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d45f0:	b508      	push	{r3, lr}
   d45f2:	4b02      	ldr	r3, [pc, #8]	; (d45fc <network_connecting+0xc>)
   d45f4:	681b      	ldr	r3, [r3, #0]
   d45f6:	689b      	ldr	r3, [r3, #8]
   d45f8:	9301      	str	r3, [sp, #4]
   d45fa:	bd08      	pop	{r3, pc}
   d45fc:	00030240 	.word	0x00030240

000d4600 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4600:	b508      	push	{r3, lr}
   d4602:	4b02      	ldr	r3, [pc, #8]	; (d460c <network_disconnect+0xc>)
   d4604:	681b      	ldr	r3, [r3, #0]
   d4606:	68db      	ldr	r3, [r3, #12]
   d4608:	9301      	str	r3, [sp, #4]
   d460a:	bd08      	pop	{r3, pc}
   d460c:	00030240 	.word	0x00030240

000d4610 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4610:	b508      	push	{r3, lr}
   d4612:	4b02      	ldr	r3, [pc, #8]	; (d461c <network_ready+0xc>)
   d4614:	681b      	ldr	r3, [r3, #0]
   d4616:	691b      	ldr	r3, [r3, #16]
   d4618:	9301      	str	r3, [sp, #4]
   d461a:	bd08      	pop	{r3, pc}
   d461c:	00030240 	.word	0x00030240

000d4620 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4620:	b508      	push	{r3, lr}
   d4622:	4b02      	ldr	r3, [pc, #8]	; (d462c <network_on+0xc>)
   d4624:	681b      	ldr	r3, [r3, #0]
   d4626:	695b      	ldr	r3, [r3, #20]
   d4628:	9301      	str	r3, [sp, #4]
   d462a:	bd08      	pop	{r3, pc}
   d462c:	00030240 	.word	0x00030240

000d4630 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4630:	b508      	push	{r3, lr}
   d4632:	4b02      	ldr	r3, [pc, #8]	; (d463c <network_off+0xc>)
   d4634:	681b      	ldr	r3, [r3, #0]
   d4636:	699b      	ldr	r3, [r3, #24]
   d4638:	9301      	str	r3, [sp, #4]
   d463a:	bd08      	pop	{r3, pc}
   d463c:	00030240 	.word	0x00030240

000d4640 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4640:	b508      	push	{r3, lr}
   d4642:	4b02      	ldr	r3, [pc, #8]	; (d464c <network_listen+0xc>)
   d4644:	681b      	ldr	r3, [r3, #0]
   d4646:	69db      	ldr	r3, [r3, #28]
   d4648:	9301      	str	r3, [sp, #4]
   d464a:	bd08      	pop	{r3, pc}
   d464c:	00030240 	.word	0x00030240

000d4650 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4650:	b508      	push	{r3, lr}
   d4652:	4b02      	ldr	r3, [pc, #8]	; (d465c <network_listening+0xc>)
   d4654:	681b      	ldr	r3, [r3, #0]
   d4656:	6a1b      	ldr	r3, [r3, #32]
   d4658:	9301      	str	r3, [sp, #4]
   d465a:	bd08      	pop	{r3, pc}
   d465c:	00030240 	.word	0x00030240

000d4660 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4660:	b508      	push	{r3, lr}
   d4662:	4b02      	ldr	r3, [pc, #8]	; (d466c <network_set_listen_timeout+0xc>)
   d4664:	681b      	ldr	r3, [r3, #0]
   d4666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4668:	9301      	str	r3, [sp, #4]
   d466a:	bd08      	pop	{r3, pc}
   d466c:	00030240 	.word	0x00030240

000d4670 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4670:	b508      	push	{r3, lr}
   d4672:	4b02      	ldr	r3, [pc, #8]	; (d467c <network_get_listen_timeout+0xc>)
   d4674:	681b      	ldr	r3, [r3, #0]
   d4676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4678:	9301      	str	r3, [sp, #4]
   d467a:	bd08      	pop	{r3, pc}
   d467c:	00030240 	.word	0x00030240

000d4680 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4680:	b508      	push	{r3, lr}
   d4682:	4b02      	ldr	r3, [pc, #8]	; (d468c <network_is_on+0xc>)
   d4684:	681b      	ldr	r3, [r3, #0]
   d4686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4688:	9301      	str	r3, [sp, #4]
   d468a:	bd08      	pop	{r3, pc}
   d468c:	00030240 	.word	0x00030240

000d4690 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4690:	b508      	push	{r3, lr}
   d4692:	4b02      	ldr	r3, [pc, #8]	; (d469c <network_is_off+0xc>)
   d4694:	681b      	ldr	r3, [r3, #0]
   d4696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4698:	9301      	str	r3, [sp, #4]
   d469a:	bd08      	pop	{r3, pc}
   d469c:	00030240 	.word	0x00030240

000d46a0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d46a0:	b508      	push	{r3, lr}
   d46a2:	4b02      	ldr	r3, [pc, #8]	; (d46ac <spark_set_random_seed_from_cloud_handler+0xc>)
   d46a4:	681b      	ldr	r3, [r3, #0]
   d46a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d46a8:	9301      	str	r3, [sp, #4]
   d46aa:	bd08      	pop	{r3, pc}
   d46ac:	00030244 	.word	0x00030244

000d46b0 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d46b0:	b508      	push	{r3, lr}
   d46b2:	4b02      	ldr	r3, [pc, #8]	; (d46bc <malloc+0xc>)
   d46b4:	681b      	ldr	r3, [r3, #0]
   d46b6:	681b      	ldr	r3, [r3, #0]
   d46b8:	9301      	str	r3, [sp, #4]
   d46ba:	bd08      	pop	{r3, pc}
   d46bc:	0003021c 	.word	0x0003021c

000d46c0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d46c0:	b508      	push	{r3, lr}
   d46c2:	4b02      	ldr	r3, [pc, #8]	; (d46cc <free+0xc>)
   d46c4:	681b      	ldr	r3, [r3, #0]
   d46c6:	685b      	ldr	r3, [r3, #4]
   d46c8:	9301      	str	r3, [sp, #4]
   d46ca:	bd08      	pop	{r3, pc}
   d46cc:	0003021c 	.word	0x0003021c

000d46d0 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d46d0:	b508      	push	{r3, lr}
   d46d2:	4b02      	ldr	r3, [pc, #8]	; (d46dc <abort+0xc>)
   d46d4:	681b      	ldr	r3, [r3, #0]
   d46d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d46d8:	9301      	str	r3, [sp, #4]
   d46da:	bd08      	pop	{r3, pc}
   d46dc:	0003021c 	.word	0x0003021c

000d46e0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d46e0:	b508      	push	{r3, lr}
   d46e2:	4b02      	ldr	r3, [pc, #8]	; (d46ec <newlib_impure_ptr_callback+0xc>)
   d46e4:	681b      	ldr	r3, [r3, #0]
   d46e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d46e8:	9301      	str	r3, [sp, #4]
   d46ea:	bd08      	pop	{r3, pc}
   d46ec:	0003021c 	.word	0x0003021c

000d46f0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d46f0:	2200      	movs	r2, #0
   d46f2:	6840      	ldr	r0, [r0, #4]
   d46f4:	4611      	mov	r1, r2
   d46f6:	f7ff bfab 	b.w	d4650 <network_listening>

000d46fa <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d46fa:	2200      	movs	r2, #0
   d46fc:	6840      	ldr	r0, [r0, #4]
   d46fe:	4611      	mov	r1, r2
   d4700:	f7ff bfb6 	b.w	d4670 <network_get_listen_timeout>

000d4704 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4704:	6840      	ldr	r0, [r0, #4]
   d4706:	2200      	movs	r2, #0
   d4708:	f7ff bfaa 	b.w	d4660 <network_set_listen_timeout>

000d470c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d470c:	6840      	ldr	r0, [r0, #4]
   d470e:	2200      	movs	r2, #0
   d4710:	f081 0101 	eor.w	r1, r1, #1
   d4714:	f7ff bf94 	b.w	d4640 <network_listen>

000d4718 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4718:	2300      	movs	r3, #0
   d471a:	6840      	ldr	r0, [r0, #4]
   d471c:	461a      	mov	r2, r3
   d471e:	4619      	mov	r1, r3
   d4720:	f7ff bf86 	b.w	d4630 <network_off>

000d4724 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4724:	2300      	movs	r3, #0
   d4726:	6840      	ldr	r0, [r0, #4]
   d4728:	461a      	mov	r2, r3
   d472a:	4619      	mov	r1, r3
   d472c:	f7ff bf78 	b.w	d4620 <network_on>

000d4730 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4730:	2200      	movs	r2, #0
   d4732:	6840      	ldr	r0, [r0, #4]
   d4734:	4611      	mov	r1, r2
   d4736:	f7ff bf6b 	b.w	d4610 <network_ready>

000d473a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d473a:	2200      	movs	r2, #0
   d473c:	6840      	ldr	r0, [r0, #4]
   d473e:	4611      	mov	r1, r2
   d4740:	f7ff bf56 	b.w	d45f0 <network_connecting>

000d4744 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4744:	6840      	ldr	r0, [r0, #4]
   d4746:	2200      	movs	r2, #0
   d4748:	2102      	movs	r1, #2
   d474a:	f7ff bf59 	b.w	d4600 <network_disconnect>

000d474e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d474e:	2300      	movs	r3, #0
   d4750:	6840      	ldr	r0, [r0, #4]
   d4752:	461a      	mov	r2, r3
   d4754:	f7ff bf44 	b.w	d45e0 <network_connect>

000d4758 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4758:	4b02      	ldr	r3, [pc, #8]	; (d4764 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d475a:	2203      	movs	r2, #3
   d475c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d475e:	4a02      	ldr	r2, [pc, #8]	; (d4768 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4760:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4762:	4770      	bx	lr
   d4764:	2003e5a8 	.word	0x2003e5a8
   d4768:	000d52ec 	.word	0x000d52ec

000d476c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d476c:	b510      	push	{r4, lr}
   d476e:	4604      	mov	r4, r0
   d4770:	4608      	mov	r0, r1
{
    _spi = spi;
   d4772:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4774:	f7ff fed0 	bl	d4518 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4778:	2300      	movs	r3, #0
   d477a:	6063      	str	r3, [r4, #4]
}
   d477c:	4620      	mov	r0, r4
   d477e:	bd10      	pop	{r4, pc}

000d4780 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4780:	4b05      	ldr	r3, [pc, #20]	; (d4798 <_GLOBAL__sub_I_System+0x18>)
   d4782:	2202      	movs	r2, #2
   d4784:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4786:	4b05      	ldr	r3, [pc, #20]	; (d479c <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d4788:	4a05      	ldr	r2, [pc, #20]	; (d47a0 <_GLOBAL__sub_I_System+0x20>)
   d478a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d478c:	2000      	movs	r0, #0
   d478e:	6018      	str	r0, [r3, #0]
   d4790:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d4792:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4794:	f7ff bf00 	b.w	d4598 <set_system_mode>
   d4798:	2003e5bc 	.word	0x2003e5bc
   d479c:	2003e5b0 	.word	0x2003e5b0
   d47a0:	ffff0000 	.word	0xffff0000

000d47a4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d47a4:	4802      	ldr	r0, [pc, #8]	; (d47b0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d47a6:	2300      	movs	r3, #0
   d47a8:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d47aa:	f7ff be2d 	b.w	d4408 <os_mutex_recursive_create>
   d47ae:	bf00      	nop
   d47b0:	2003e5c0 	.word	0x2003e5c0

000d47b4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d47b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47b6:	4606      	mov	r6, r0
   d47b8:	460d      	mov	r5, r1
  size_t n = 0;
   d47ba:	188f      	adds	r7, r1, r2
   d47bc:	2400      	movs	r4, #0
  while (size--) {
   d47be:	42bd      	cmp	r5, r7
   d47c0:	d00c      	beq.n	d47dc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d47c2:	6833      	ldr	r3, [r6, #0]
   d47c4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d47c8:	689b      	ldr	r3, [r3, #8]
   d47ca:	4630      	mov	r0, r6
   d47cc:	4798      	blx	r3
     if (chunk>=0)
   d47ce:	1e03      	subs	r3, r0, #0
   d47d0:	db01      	blt.n	d47d6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d47d2:	441c      	add	r4, r3
  while (size--) {
   d47d4:	e7f3      	b.n	d47be <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d47d6:	2c00      	cmp	r4, #0
   d47d8:	bf08      	it	eq
   d47da:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d47dc:	4620      	mov	r0, r4
   d47de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47e0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d47e0:	b513      	push	{r0, r1, r4, lr}
   d47e2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d47e4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d47e6:	b159      	cbz	r1, d4800 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d47e8:	9101      	str	r1, [sp, #4]
   d47ea:	f000 fce5 	bl	d51b8 <strlen>
   d47ee:	6823      	ldr	r3, [r4, #0]
   d47f0:	9901      	ldr	r1, [sp, #4]
   d47f2:	68db      	ldr	r3, [r3, #12]
   d47f4:	4602      	mov	r2, r0
   d47f6:	4620      	mov	r0, r4
    }
   d47f8:	b002      	add	sp, #8
   d47fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d47fe:	4718      	bx	r3
    }
   d4800:	b002      	add	sp, #8
   d4802:	bd10      	pop	{r4, pc}

000d4804 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4804:	6803      	ldr	r3, [r0, #0]
   d4806:	689b      	ldr	r3, [r3, #8]
   d4808:	4718      	bx	r3

000d480a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d480a:	b530      	push	{r4, r5, lr}
   d480c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d480e:	2300      	movs	r3, #0
   d4810:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4814:	2a01      	cmp	r2, #1
   d4816:	bf98      	it	ls
   d4818:	220a      	movls	r2, #10
   d481a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d481c:	460d      	mov	r5, r1
   d481e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4822:	fb01 5312 	mls	r3, r1, r2, r5
   d4826:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d482a:	2b09      	cmp	r3, #9
   d482c:	bf94      	ite	ls
   d482e:	3330      	addls	r3, #48	; 0x30
   d4830:	3337      	addhi	r3, #55	; 0x37
   d4832:	b2db      	uxtb	r3, r3
  } while(n);
   d4834:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4836:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d483a:	d9ef      	bls.n	d481c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d483c:	4621      	mov	r1, r4
   d483e:	f7ff ffcf 	bl	d47e0 <_ZN5Print5writeEPKc>
}
   d4842:	b00b      	add	sp, #44	; 0x2c
   d4844:	bd30      	pop	{r4, r5, pc}
	...

000d4848 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4848:	4b01      	ldr	r3, [pc, #4]	; (d4850 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d484a:	4a02      	ldr	r2, [pc, #8]	; (d4854 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d484c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d484e:	4770      	bx	lr
   d4850:	2003e5c4 	.word	0x2003e5c4
   d4854:	000d5320 	.word	0x000d5320

000d4858 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4858:	4b02      	ldr	r3, [pc, #8]	; (d4864 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d485a:	681a      	ldr	r2, [r3, #0]
   d485c:	4b02      	ldr	r3, [pc, #8]	; (d4868 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d485e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4860:	4770      	bx	lr
   d4862:	bf00      	nop
   d4864:	2003e23c 	.word	0x2003e23c
   d4868:	2003e5c8 	.word	0x2003e5c8

000d486c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d486c:	2100      	movs	r1, #0
   d486e:	f7ff be9b 	b.w	d45a8 <system_delay_ms>
	...

000d4874 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d4874:	4b01      	ldr	r3, [pc, #4]	; (d487c <_GLOBAL__sub_I_RGB+0x8>)
   d4876:	2200      	movs	r2, #0
   d4878:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d487a:	4770      	bx	lr
   d487c:	2003e5cc 	.word	0x2003e5cc

000d4880 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4880:	4b01      	ldr	r3, [pc, #4]	; (d4888 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4882:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4884:	4770      	bx	lr
   d4886:	bf00      	nop
   d4888:	2003e240 	.word	0x2003e240

000d488c <serialEventRun>:
{
   d488c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d488e:	4b0b      	ldr	r3, [pc, #44]	; (d48bc <serialEventRun+0x30>)
   d4890:	b143      	cbz	r3, d48a4 <serialEventRun+0x18>
   d4892:	f000 f95d 	bl	d4b50 <_Z16_fetch_usbserialv>
   d4896:	6803      	ldr	r3, [r0, #0]
   d4898:	691b      	ldr	r3, [r3, #16]
   d489a:	4798      	blx	r3
   d489c:	2800      	cmp	r0, #0
   d489e:	dd01      	ble.n	d48a4 <serialEventRun+0x18>
        serialEvent();
   d48a0:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d48a4:	4b06      	ldr	r3, [pc, #24]	; (d48c0 <serialEventRun+0x34>)
   d48a6:	b143      	cbz	r3, d48ba <serialEventRun+0x2e>
   d48a8:	f000 f9cc 	bl	d4c44 <_Z22__fetch_global_Serial1v>
   d48ac:	6803      	ldr	r3, [r0, #0]
   d48ae:	691b      	ldr	r3, [r3, #16]
   d48b0:	4798      	blx	r3
   d48b2:	2800      	cmp	r0, #0
   d48b4:	dd01      	ble.n	d48ba <serialEventRun+0x2e>
        serialEvent1();
   d48b6:	f3af 8000 	nop.w
}
   d48ba:	bd08      	pop	{r3, pc}
	...

000d48c4 <_post_loop>:
{
   d48c4:	b508      	push	{r3, lr}
	serialEventRun();
   d48c6:	f7ff ffe1 	bl	d488c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d48ca:	f7ff fd95 	bl	d43f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d48ce:	4b01      	ldr	r3, [pc, #4]	; (d48d4 <_post_loop+0x10>)
   d48d0:	6018      	str	r0, [r3, #0]
}
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	2003e738 	.word	0x2003e738

000d48d8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d48d8:	4805      	ldr	r0, [pc, #20]	; (d48f0 <_Z33system_initialize_user_backup_ramv+0x18>)
   d48da:	4a06      	ldr	r2, [pc, #24]	; (d48f4 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d48dc:	4906      	ldr	r1, [pc, #24]	; (d48f8 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d48de:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d48e0:	1a12      	subs	r2, r2, r0
   d48e2:	f000 fc2f 	bl	d5144 <memcpy>
    __backup_sram_signature = signature;
   d48e6:	4b05      	ldr	r3, [pc, #20]	; (d48fc <_Z33system_initialize_user_backup_ramv+0x24>)
   d48e8:	4a05      	ldr	r2, [pc, #20]	; (d4900 <_Z33system_initialize_user_backup_ramv+0x28>)
   d48ea:	601a      	str	r2, [r3, #0]
}
   d48ec:	bd08      	pop	{r3, pc}
   d48ee:	bf00      	nop
   d48f0:	2003f400 	.word	0x2003f400
   d48f4:	2003f404 	.word	0x2003f404
   d48f8:	000d54c0 	.word	0x000d54c0
   d48fc:	2003f400 	.word	0x2003f400
   d4900:	9a271c1e 	.word	0x9a271c1e

000d4904 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d4904:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4906:	2300      	movs	r3, #0
   d4908:	9300      	str	r3, [sp, #0]
   d490a:	461a      	mov	r2, r3
   d490c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d4910:	f7ff fe5c 	bl	d45cc <system_ctrl_set_result>
}
   d4914:	b003      	add	sp, #12
   d4916:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d491c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d491c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d491e:	8843      	ldrh	r3, [r0, #2]
   d4920:	2b0a      	cmp	r3, #10
   d4922:	d008      	beq.n	d4936 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d4924:	2b50      	cmp	r3, #80	; 0x50
   d4926:	d10b      	bne.n	d4940 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d4928:	4b09      	ldr	r3, [pc, #36]	; (d4950 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d492a:	681b      	ldr	r3, [r3, #0]
   d492c:	b14b      	cbz	r3, d4942 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d492e:	b003      	add	sp, #12
   d4930:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d4934:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d4936:	f7ff ffe5 	bl	d4904 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d493a:	b003      	add	sp, #12
   d493c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d4940:	2300      	movs	r3, #0
   d4942:	9300      	str	r3, [sp, #0]
   d4944:	461a      	mov	r2, r3
   d4946:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d494a:	f7ff fe3f 	bl	d45cc <system_ctrl_set_result>
}
   d494e:	e7f4      	b.n	d493a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d4950:	2003e5e0 	.word	0x2003e5e0

000d4954 <module_user_init_hook>:
{
   d4954:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d4956:	4812      	ldr	r0, [pc, #72]	; (d49a0 <module_user_init_hook+0x4c>)
   d4958:	2100      	movs	r1, #0
   d495a:	f7ff fec1 	bl	d46e0 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d495e:	4b11      	ldr	r3, [pc, #68]	; (d49a4 <module_user_init_hook+0x50>)
   d4960:	681a      	ldr	r2, [r3, #0]
   d4962:	4b11      	ldr	r3, [pc, #68]	; (d49a8 <module_user_init_hook+0x54>)
   d4964:	429a      	cmp	r2, r3
   d4966:	4b11      	ldr	r3, [pc, #68]	; (d49ac <module_user_init_hook+0x58>)
   d4968:	bf0c      	ite	eq
   d496a:	2201      	moveq	r2, #1
   d496c:	2200      	movne	r2, #0
   d496e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d4970:	d001      	beq.n	d4976 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d4972:	f7ff ffb1 	bl	d48d8 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d4976:	f7ff fd37 	bl	d43e8 <HAL_RNG_GetRandomNumber>
   d497a:	4604      	mov	r4, r0
    srand(seed);
   d497c:	f000 fbf8 	bl	d5170 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d4980:	4b0b      	ldr	r3, [pc, #44]	; (d49b0 <module_user_init_hook+0x5c>)
   d4982:	b113      	cbz	r3, d498a <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d4984:	4620      	mov	r0, r4
   d4986:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d498a:	2100      	movs	r1, #0
   d498c:	4808      	ldr	r0, [pc, #32]	; (d49b0 <module_user_init_hook+0x5c>)
   d498e:	f7ff fe87 	bl	d46a0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d4992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d4996:	4807      	ldr	r0, [pc, #28]	; (d49b4 <module_user_init_hook+0x60>)
   d4998:	2100      	movs	r1, #0
   d499a:	f7ff be0d 	b.w	d45b8 <system_ctrl_set_app_request_handler>
   d499e:	bf00      	nop
   d49a0:	000d4881 	.word	0x000d4881
   d49a4:	2003f400 	.word	0x2003f400
   d49a8:	9a271c1e 	.word	0x9a271c1e
   d49ac:	2003e5dc 	.word	0x2003e5dc
   d49b0:	00000000 	.word	0x00000000
   d49b4:	000d491d 	.word	0x000d491d

000d49b8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d49b8:	4770      	bx	lr

000d49ba <_ZN9IPAddressD0Ev>:
   d49ba:	b510      	push	{r4, lr}
   d49bc:	2118      	movs	r1, #24
   d49be:	4604      	mov	r4, r0
   d49c0:	f000 fb38 	bl	d5034 <_ZdlPvj>
   d49c4:	4620      	mov	r0, r4
   d49c6:	bd10      	pop	{r4, pc}

000d49c8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d49c8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d49ca:	7d03      	ldrb	r3, [r0, #20]
   d49cc:	2b06      	cmp	r3, #6
{
   d49ce:	b08d      	sub	sp, #52	; 0x34
   d49d0:	460e      	mov	r6, r1
   d49d2:	f100 0704 	add.w	r7, r0, #4
   d49d6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d49da:	d012      	beq.n	d4a02 <_ZNK9IPAddress7printToER5Print+0x3a>
   d49dc:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d49e0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d49e4:	220a      	movs	r2, #10
   d49e6:	4630      	mov	r0, r6
   d49e8:	f7ff ff0f 	bl	d480a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d49ec:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d49ee:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d49f0:	d019      	beq.n	d4a26 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d49f2:	2c00      	cmp	r4, #0
   d49f4:	d0f4      	beq.n	d49e0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d49f6:	212e      	movs	r1, #46	; 0x2e
   d49f8:	4630      	mov	r0, r6
   d49fa:	f7ff ff03 	bl	d4804 <_ZN5Print5printEc>
   d49fe:	4404      	add	r4, r0
   d4a00:	e7ee      	b.n	d49e0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a02:	232f      	movs	r3, #47	; 0x2f
   d4a04:	466a      	mov	r2, sp
   d4a06:	4639      	mov	r1, r7
   d4a08:	200a      	movs	r0, #10
		buf[0] = 0;
   d4a0a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4a0e:	f7ff fd03 	bl	d4418 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d4a12:	4668      	mov	r0, sp
   d4a14:	f000 fbd0 	bl	d51b8 <strlen>
   d4a18:	6833      	ldr	r3, [r6, #0]
   d4a1a:	4602      	mov	r2, r0
   d4a1c:	68db      	ldr	r3, [r3, #12]
   d4a1e:	4669      	mov	r1, sp
   d4a20:	4630      	mov	r0, r6
   d4a22:	4798      	blx	r3
   d4a24:	4604      	mov	r4, r0
    }
    return n;
}
   d4a26:	4620      	mov	r0, r4
   d4a28:	b00d      	add	sp, #52	; 0x34
   d4a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4a2c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d4a2c:	b510      	push	{r4, lr}
   d4a2e:	4b05      	ldr	r3, [pc, #20]	; (d4a44 <_ZN9IPAddressC1Ev+0x18>)
   d4a30:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4a32:	2211      	movs	r2, #17
   d4a34:	f840 3b04 	str.w	r3, [r0], #4
   d4a38:	2100      	movs	r1, #0
   d4a3a:	f000 fb91 	bl	d5160 <memset>
}
   d4a3e:	4620      	mov	r0, r4
   d4a40:	bd10      	pop	{r4, pc}
   d4a42:	bf00      	nop
   d4a44:	000d5348 	.word	0x000d5348

000d4a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d4a48:	4603      	mov	r3, r0
   d4a4a:	4a07      	ldr	r2, [pc, #28]	; (d4a68 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4a4c:	b510      	push	{r4, lr}
   d4a4e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d4a52:	f101 0210 	add.w	r2, r1, #16
   d4a56:	f851 4b04 	ldr.w	r4, [r1], #4
   d4a5a:	f843 4b04 	str.w	r4, [r3], #4
   d4a5e:	4291      	cmp	r1, r2
   d4a60:	d1f9      	bne.n	d4a56 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4a62:	780a      	ldrb	r2, [r1, #0]
   d4a64:	701a      	strb	r2, [r3, #0]
}
   d4a66:	bd10      	pop	{r4, pc}
   d4a68:	000d5348 	.word	0x000d5348

000d4a6c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d4a6c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4a6e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4a72:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4a76:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4a7a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d4a7e:	2304      	movs	r3, #4
   d4a80:	6041      	str	r1, [r0, #4]
   d4a82:	7503      	strb	r3, [r0, #20]
}
   d4a84:	bd10      	pop	{r4, pc}

000d4a86 <_ZN9IPAddressaSEPKh>:
{
   d4a86:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4a88:	78cb      	ldrb	r3, [r1, #3]
   d4a8a:	9300      	str	r3, [sp, #0]
   d4a8c:	788b      	ldrb	r3, [r1, #2]
   d4a8e:	784a      	ldrb	r2, [r1, #1]
   d4a90:	7809      	ldrb	r1, [r1, #0]
   d4a92:	f7ff ffeb 	bl	d4a6c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d4a96:	b002      	add	sp, #8
   d4a98:	bd10      	pop	{r4, pc}

000d4a9a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4a9a:	7441      	strb	r1, [r0, #17]
}
   d4a9c:	4770      	bx	lr

000d4a9e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4a9e:	4770      	bx	lr

000d4aa0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d4aa0:	4770      	bx	lr

000d4aa2 <_ZN9USBSerial4readEv>:
{
   d4aa2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d4aa4:	2100      	movs	r1, #0
   d4aa6:	7c00      	ldrb	r0, [r0, #16]
   d4aa8:	f7ff fd5e 	bl	d4568 <HAL_USB_USART_Receive_Data>
}
   d4aac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ab0:	bd08      	pop	{r3, pc}

000d4ab2 <_ZN9USBSerial4peekEv>:
{
   d4ab2:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d4ab4:	2101      	movs	r1, #1
   d4ab6:	7c00      	ldrb	r0, [r0, #16]
   d4ab8:	f7ff fd56 	bl	d4568 <HAL_USB_USART_Receive_Data>
}
   d4abc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4ac0:	bd08      	pop	{r3, pc}

000d4ac2 <_ZN9USBSerial17availableForWriteEv>:
{
   d4ac2:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d4ac4:	7c00      	ldrb	r0, [r0, #16]
   d4ac6:	f7ff fd47 	bl	d4558 <HAL_USB_USART_Available_Data_For_Write>
}
   d4aca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4ace:	bd08      	pop	{r3, pc}

000d4ad0 <_ZN9USBSerial9availableEv>:
{
   d4ad0:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d4ad2:	7c00      	ldrb	r0, [r0, #16]
   d4ad4:	f7ff fd38 	bl	d4548 <HAL_USB_USART_Available_Data>
}
   d4ad8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4adc:	bd08      	pop	{r3, pc}

000d4ade <_ZN9USBSerial5writeEh>:
{
   d4ade:	b513      	push	{r0, r1, r4, lr}
   d4ae0:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ae2:	7c00      	ldrb	r0, [r0, #16]
{
   d4ae4:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d4ae6:	f7ff fd37 	bl	d4558 <HAL_USB_USART_Available_Data_For_Write>
   d4aea:	2800      	cmp	r0, #0
   d4aec:	9901      	ldr	r1, [sp, #4]
   d4aee:	dc01      	bgt.n	d4af4 <_ZN9USBSerial5writeEh+0x16>
   d4af0:	7c60      	ldrb	r0, [r4, #17]
   d4af2:	b120      	cbz	r0, d4afe <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d4af4:	7c20      	ldrb	r0, [r4, #16]
   d4af6:	f7ff fd3f 	bl	d4578 <HAL_USB_USART_Send_Data>
   d4afa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d4afe:	b002      	add	sp, #8
   d4b00:	bd10      	pop	{r4, pc}

000d4b02 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d4b02:	7c00      	ldrb	r0, [r0, #16]
   d4b04:	f7ff bd40 	b.w	d4588 <HAL_USB_USART_Flush_Data>

000d4b08 <_ZN9USBSerialD0Ev>:
   d4b08:	b510      	push	{r4, lr}
   d4b0a:	2114      	movs	r1, #20
   d4b0c:	4604      	mov	r4, r0
   d4b0e:	f000 fa91 	bl	d5034 <_ZdlPvj>
   d4b12:	4620      	mov	r0, r4
   d4b14:	bd10      	pop	{r4, pc}
	...

000d4b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d4b18:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d4b1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4b1e:	4604      	mov	r4, r0
   d4b20:	4608      	mov	r0, r1
   d4b22:	2100      	movs	r1, #0
   d4b24:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4b28:	4b04      	ldr	r3, [pc, #16]	; (d4b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d4b2a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d4b2c:	2301      	movs	r3, #1
  _serial = serial;
   d4b2e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4b30:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d4b32:	4611      	mov	r1, r2
   d4b34:	f7ff fd00 	bl	d4538 <HAL_USB_USART_Init>
}
   d4b38:	4620      	mov	r0, r4
   d4b3a:	bd10      	pop	{r4, pc}
   d4b3c:	000d535c 	.word	0x000d535c

000d4b40 <_Z19acquireSerialBufferv>:
{
   d4b40:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d4b42:	2214      	movs	r2, #20
{
   d4b44:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d4b46:	2100      	movs	r1, #0
   d4b48:	f000 fb0a 	bl	d5160 <memset>
}
   d4b4c:	4620      	mov	r0, r4
   d4b4e:	bd10      	pop	{r4, pc}

000d4b50 <_Z16_fetch_usbserialv>:
{
   d4b50:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4b52:	4c0f      	ldr	r4, [pc, #60]	; (d4b90 <_Z16_fetch_usbserialv+0x40>)
{
   d4b54:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d4b56:	a803      	add	r0, sp, #12
   d4b58:	f7ff fff2 	bl	d4b40 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d4b5c:	7821      	ldrb	r1, [r4, #0]
   d4b5e:	f3bf 8f5b 	dmb	ish
   d4b62:	f011 0101 	ands.w	r1, r1, #1
   d4b66:	d10f      	bne.n	d4b88 <_Z16_fetch_usbserialv+0x38>
   d4b68:	4620      	mov	r0, r4
   d4b6a:	9101      	str	r1, [sp, #4]
   d4b6c:	f7ff fa97 	bl	d409e <__cxa_guard_acquire>
   d4b70:	9901      	ldr	r1, [sp, #4]
   d4b72:	b148      	cbz	r0, d4b88 <_Z16_fetch_usbserialv+0x38>
   d4b74:	aa03      	add	r2, sp, #12
   d4b76:	4807      	ldr	r0, [pc, #28]	; (d4b94 <_Z16_fetch_usbserialv+0x44>)
   d4b78:	f7ff ffce 	bl	d4b18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d4b7c:	4620      	mov	r0, r4
   d4b7e:	f7ff fa93 	bl	d40a8 <__cxa_guard_release>
   d4b82:	4805      	ldr	r0, [pc, #20]	; (d4b98 <_Z16_fetch_usbserialv+0x48>)
   d4b84:	f000 fad8 	bl	d5138 <atexit>
	return _usbserial;
}
   d4b88:	4802      	ldr	r0, [pc, #8]	; (d4b94 <_Z16_fetch_usbserialv+0x44>)
   d4b8a:	b008      	add	sp, #32
   d4b8c:	bd10      	pop	{r4, pc}
   d4b8e:	bf00      	nop
   d4b90:	2003e5e4 	.word	0x2003e5e4
   d4b94:	2003e5e8 	.word	0x2003e5e8
   d4b98:	000d4a9f 	.word	0x000d4a9f

000d4b9c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d4b9c:	4770      	bx	lr

000d4b9e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d4b9e:	7441      	strb	r1, [r0, #17]
}
   d4ba0:	4770      	bx	lr

000d4ba2 <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4ba2:	4770      	bx	lr

000d4ba4 <_ZN11USARTSerial17availableForWriteEv>:
{
   d4ba4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d4ba6:	7c00      	ldrb	r0, [r0, #16]
   d4ba8:	f7ff fc76 	bl	d4498 <hal_usart_available_data_for_write>
}
   d4bac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bb0:	bd08      	pop	{r3, pc}

000d4bb2 <_ZN11USARTSerial9availableEv>:
{
   d4bb2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d4bb4:	7c00      	ldrb	r0, [r0, #16]
   d4bb6:	f7ff fc47 	bl	d4448 <hal_usart_available>
}
   d4bba:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d4bbe:	bd08      	pop	{r3, pc}

000d4bc0 <_ZN11USARTSerial4peekEv>:
{
   d4bc0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d4bc2:	7c00      	ldrb	r0, [r0, #16]
   d4bc4:	f7ff fc50 	bl	d4468 <hal_usart_peek>
}
   d4bc8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4bcc:	bd08      	pop	{r3, pc}

000d4bce <_ZN11USARTSerial4readEv>:
{
   d4bce:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d4bd0:	7c00      	ldrb	r0, [r0, #16]
   d4bd2:	f7ff fc41 	bl	d4458 <hal_usart_read>
}
   d4bd6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d4bda:	bd08      	pop	{r3, pc}

000d4bdc <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d4bdc:	7c00      	ldrb	r0, [r0, #16]
   d4bde:	f7ff bc4b 	b.w	d4478 <hal_usart_flush>

000d4be2 <_ZN11USARTSerial5writeEh>:
{
   d4be2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4be4:	7c45      	ldrb	r5, [r0, #17]
{
   d4be6:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4be8:	b12d      	cbz	r5, d4bf6 <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d4bea:	7c20      	ldrb	r0, [r4, #16]
}
   d4bec:	b003      	add	sp, #12
   d4bee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d4bf2:	f7ff bc21 	b.w	d4438 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d4bf6:	7c00      	ldrb	r0, [r0, #16]
   d4bf8:	9101      	str	r1, [sp, #4]
   d4bfa:	f7ff fc4d 	bl	d4498 <hal_usart_available_data_for_write>
   d4bfe:	2800      	cmp	r0, #0
   d4c00:	9901      	ldr	r1, [sp, #4]
   d4c02:	dcf2      	bgt.n	d4bea <_ZN11USARTSerial5writeEh+0x8>
}
   d4c04:	4628      	mov	r0, r5
   d4c06:	b003      	add	sp, #12
   d4c08:	bd30      	pop	{r4, r5, pc}

000d4c0a <_ZN11USARTSerialD0Ev>:
   d4c0a:	b510      	push	{r4, lr}
   d4c0c:	2114      	movs	r1, #20
   d4c0e:	4604      	mov	r4, r0
   d4c10:	f000 fa10 	bl	d5034 <_ZdlPvj>
   d4c14:	4620      	mov	r0, r4
   d4c16:	bd10      	pop	{r4, pc}

000d4c18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d4c18:	b510      	push	{r4, lr}
   d4c1a:	f04f 0c00 	mov.w	ip, #0
   d4c1e:	4604      	mov	r4, r0
   d4c20:	4608      	mov	r0, r1
   d4c22:	4611      	mov	r1, r2
   d4c24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d4c28:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d4c2c:	4a04      	ldr	r2, [pc, #16]	; (d4c40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d4c2e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d4c30:	2201      	movs	r2, #1
  _serial = serial;
   d4c32:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d4c34:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d4c36:	461a      	mov	r2, r3
   d4c38:	f7ff fbf6 	bl	d4428 <hal_usart_init>
}
   d4c3c:	4620      	mov	r0, r4
   d4c3e:	bd10      	pop	{r4, pc}
   d4c40:	000d538c 	.word	0x000d538c

000d4c44 <_Z22__fetch_global_Serial1v>:
{
   d4c44:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d4c46:	4c0d      	ldr	r4, [pc, #52]	; (d4c7c <_Z22__fetch_global_Serial1v+0x38>)
   d4c48:	7821      	ldrb	r1, [r4, #0]
   d4c4a:	f3bf 8f5b 	dmb	ish
   d4c4e:	f011 0101 	ands.w	r1, r1, #1
   d4c52:	d110      	bne.n	d4c76 <_Z22__fetch_global_Serial1v+0x32>
   d4c54:	4620      	mov	r0, r4
   d4c56:	9101      	str	r1, [sp, #4]
   d4c58:	f7ff fa21 	bl	d409e <__cxa_guard_acquire>
   d4c5c:	9901      	ldr	r1, [sp, #4]
   d4c5e:	b150      	cbz	r0, d4c76 <_Z22__fetch_global_Serial1v+0x32>
   d4c60:	4b07      	ldr	r3, [pc, #28]	; (d4c80 <_Z22__fetch_global_Serial1v+0x3c>)
   d4c62:	4a08      	ldr	r2, [pc, #32]	; (d4c84 <_Z22__fetch_global_Serial1v+0x40>)
   d4c64:	4808      	ldr	r0, [pc, #32]	; (d4c88 <_Z22__fetch_global_Serial1v+0x44>)
   d4c66:	f7ff ffd7 	bl	d4c18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d4c6a:	4620      	mov	r0, r4
   d4c6c:	f7ff fa1c 	bl	d40a8 <__cxa_guard_release>
   d4c70:	4806      	ldr	r0, [pc, #24]	; (d4c8c <_Z22__fetch_global_Serial1v+0x48>)
   d4c72:	f000 fa61 	bl	d5138 <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d4c76:	4804      	ldr	r0, [pc, #16]	; (d4c88 <_Z22__fetch_global_Serial1v+0x44>)
   d4c78:	b002      	add	sp, #8
   d4c7a:	bd10      	pop	{r4, pc}
   d4c7c:	2003e5fc 	.word	0x2003e5fc
   d4c80:	2003e684 	.word	0x2003e684
   d4c84:	2003e600 	.word	0x2003e600
   d4c88:	2003e708 	.word	0x2003e708
   d4c8c:	000d4ba3 	.word	0x000d4ba3

000d4c90 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d4c90:	4770      	bx	lr

000d4c92 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d4c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c94:	4606      	mov	r6, r0
   d4c96:	4615      	mov	r5, r2
   d4c98:	460c      	mov	r4, r1
   d4c9a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d4c9c:	42bc      	cmp	r4, r7
   d4c9e:	d006      	beq.n	d4cae <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d4ca0:	6833      	ldr	r3, [r6, #0]
   d4ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4ca6:	689b      	ldr	r3, [r3, #8]
   d4ca8:	4630      	mov	r0, r6
   d4caa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d4cac:	e7f6      	b.n	d4c9c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d4cae:	4628      	mov	r0, r5
   d4cb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4cb2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d4cb2:	7c00      	ldrb	r0, [r0, #16]
   d4cb4:	2200      	movs	r2, #0
   d4cb6:	f7ff bbf7 	b.w	d44a8 <hal_i2c_write>

000d4cba <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d4cba:	7c00      	ldrb	r0, [r0, #16]
   d4cbc:	2100      	movs	r1, #0
   d4cbe:	f7ff bbfb 	b.w	d44b8 <hal_i2c_available>

000d4cc2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d4cc2:	7c00      	ldrb	r0, [r0, #16]
   d4cc4:	2100      	movs	r1, #0
   d4cc6:	f7ff bbff 	b.w	d44c8 <hal_i2c_read>

000d4cca <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d4cca:	7c00      	ldrb	r0, [r0, #16]
   d4ccc:	2100      	movs	r1, #0
   d4cce:	f7ff bc03 	b.w	d44d8 <hal_i2c_peek>

000d4cd2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d4cd2:	7c00      	ldrb	r0, [r0, #16]
   d4cd4:	2100      	movs	r1, #0
   d4cd6:	f7ff bc07 	b.w	d44e8 <hal_i2c_flush>

000d4cda <_ZN7TwoWireD0Ev>:
   d4cda:	b510      	push	{r4, lr}
   d4cdc:	2114      	movs	r1, #20
   d4cde:	4604      	mov	r4, r0
   d4ce0:	f000 f9a8 	bl	d5034 <_ZdlPvj>
   d4ce4:	4620      	mov	r0, r4
   d4ce6:	bd10      	pop	{r4, pc}

000d4ce8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d4ce8:	b510      	push	{r4, lr}
   d4cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d4cee:	4604      	mov	r4, r0
   d4cf0:	4608      	mov	r0, r1
   d4cf2:	2100      	movs	r1, #0
   d4cf4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d4cf8:	4b03      	ldr	r3, [pc, #12]	; (d4d08 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d4cfa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d4cfc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d4cfe:	4611      	mov	r1, r2
   d4d00:	f7ff fc02 	bl	d4508 <hal_i2c_init>
}
   d4d04:	4620      	mov	r0, r4
   d4d06:	bd10      	pop	{r4, pc}
   d4d08:	000d53bc 	.word	0x000d53bc

000d4d0c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d4d0c:	2200      	movs	r2, #0
   d4d0e:	6840      	ldr	r0, [r0, #4]
   d4d10:	4611      	mov	r1, r2
   d4d12:	f7ff bc7d 	b.w	d4610 <network_ready>

000d4d16 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d16:	2200      	movs	r2, #0
   d4d18:	6840      	ldr	r0, [r0, #4]
   d4d1a:	4611      	mov	r1, r2
   d4d1c:	f7ff bc98 	b.w	d4650 <network_listening>

000d4d20 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4d20:	2200      	movs	r2, #0
   d4d22:	6840      	ldr	r0, [r0, #4]
   d4d24:	4611      	mov	r1, r2
   d4d26:	f7ff bca3 	b.w	d4670 <network_get_listen_timeout>

000d4d2a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4d2a:	6840      	ldr	r0, [r0, #4]
   d4d2c:	2200      	movs	r2, #0
   d4d2e:	f7ff bc97 	b.w	d4660 <network_set_listen_timeout>

000d4d32 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d32:	6840      	ldr	r0, [r0, #4]
   d4d34:	2200      	movs	r2, #0
   d4d36:	f081 0101 	eor.w	r1, r1, #1
   d4d3a:	f7ff bc81 	b.w	d4640 <network_listen>

000d4d3e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4d3e:	2300      	movs	r3, #0
   d4d40:	6840      	ldr	r0, [r0, #4]
   d4d42:	461a      	mov	r2, r3
   d4d44:	4619      	mov	r1, r3
   d4d46:	f7ff bc73 	b.w	d4630 <network_off>

000d4d4a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4d4a:	2300      	movs	r3, #0
   d4d4c:	6840      	ldr	r0, [r0, #4]
   d4d4e:	461a      	mov	r2, r3
   d4d50:	4619      	mov	r1, r3
   d4d52:	f7ff bc65 	b.w	d4620 <network_on>

000d4d56 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4d56:	2200      	movs	r2, #0
   d4d58:	6840      	ldr	r0, [r0, #4]
   d4d5a:	4611      	mov	r1, r2
   d4d5c:	f7ff bc48 	b.w	d45f0 <network_connecting>

000d4d60 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d60:	6840      	ldr	r0, [r0, #4]
   d4d62:	2200      	movs	r2, #0
   d4d64:	2102      	movs	r1, #2
   d4d66:	f7ff bc4b 	b.w	d4600 <network_disconnect>

000d4d6a <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4d6a:	2300      	movs	r3, #0
   d4d6c:	6840      	ldr	r0, [r0, #4]
   d4d6e:	461a      	mov	r2, r3
   d4d70:	f7ff bc36 	b.w	d45e0 <network_connect>

000d4d74 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d4d74:	4b02      	ldr	r3, [pc, #8]	; (d4d80 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d4d76:	2204      	movs	r2, #4
   d4d78:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d4d7a:	4a02      	ldr	r2, [pc, #8]	; (d4d84 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d4d7c:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d4d7e:	4770      	bx	lr
   d4d80:	2003e71c 	.word	0x2003e71c
   d4d84:	000d53e4 	.word	0x000d53e4

000d4d88 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4d88:	2300      	movs	r3, #0
   d4d8a:	6840      	ldr	r0, [r0, #4]
   d4d8c:	461a      	mov	r2, r3
   d4d8e:	f7ff bc27 	b.w	d45e0 <network_connect>

000d4d92 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4d92:	6840      	ldr	r0, [r0, #4]
   d4d94:	2200      	movs	r2, #0
   d4d96:	2102      	movs	r1, #2
   d4d98:	f7ff bc32 	b.w	d4600 <network_disconnect>

000d4d9c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4d9c:	2200      	movs	r2, #0
   d4d9e:	6840      	ldr	r0, [r0, #4]
   d4da0:	4611      	mov	r1, r2
   d4da2:	f7ff bc25 	b.w	d45f0 <network_connecting>

000d4da6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4da6:	2200      	movs	r2, #0
   d4da8:	6840      	ldr	r0, [r0, #4]
   d4daa:	4611      	mov	r1, r2
   d4dac:	f7ff bc30 	b.w	d4610 <network_ready>

000d4db0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4db0:	2300      	movs	r3, #0
   d4db2:	6840      	ldr	r0, [r0, #4]
   d4db4:	461a      	mov	r2, r3
   d4db6:	4619      	mov	r1, r3
   d4db8:	f7ff bc32 	b.w	d4620 <network_on>

000d4dbc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4dbc:	2300      	movs	r3, #0
   d4dbe:	6840      	ldr	r0, [r0, #4]
   d4dc0:	461a      	mov	r2, r3
   d4dc2:	4619      	mov	r1, r3
   d4dc4:	f7ff bc34 	b.w	d4630 <network_off>

000d4dc8 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d4dc8:	6840      	ldr	r0, [r0, #4]
   d4dca:	2100      	movs	r1, #0
   d4dcc:	f7ff bc58 	b.w	d4680 <network_is_on>

000d4dd0 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d4dd0:	6840      	ldr	r0, [r0, #4]
   d4dd2:	2100      	movs	r1, #0
   d4dd4:	f7ff bc5c 	b.w	d4690 <network_is_off>

000d4dd8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4dd8:	6840      	ldr	r0, [r0, #4]
   d4dda:	2200      	movs	r2, #0
   d4ddc:	f081 0101 	eor.w	r1, r1, #1
   d4de0:	f7ff bc2e 	b.w	d4640 <network_listen>

000d4de4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4de4:	6840      	ldr	r0, [r0, #4]
   d4de6:	2200      	movs	r2, #0
   d4de8:	f7ff bc3a 	b.w	d4660 <network_set_listen_timeout>

000d4dec <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4dec:	2200      	movs	r2, #0
   d4dee:	6840      	ldr	r0, [r0, #4]
   d4df0:	4611      	mov	r1, r2
   d4df2:	f7ff bc3d 	b.w	d4670 <network_get_listen_timeout>

000d4df6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d4df6:	2200      	movs	r2, #0
   d4df8:	6840      	ldr	r0, [r0, #4]
   d4dfa:	4611      	mov	r1, r2
   d4dfc:	f7ff bc28 	b.w	d4650 <network_listening>

000d4e00 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d4e00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d4e04:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d4e06:	b095      	sub	sp, #84	; 0x54
   d4e08:	4616      	mov	r6, r2
   d4e0a:	460d      	mov	r5, r1
   d4e0c:	4607      	mov	r7, r0
    IPAddress addr;
   d4e0e:	f7ff fe0d 	bl	d4a2c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d4e12:	4621      	mov	r1, r4
   d4e14:	2218      	movs	r2, #24
   d4e16:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d4e18:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d4e1a:	f000 f9a1 	bl	d5160 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d4e1e:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d4e20:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d4e24:	4621      	mov	r1, r4
   d4e26:	466b      	mov	r3, sp
   d4e28:	aa0c      	add	r2, sp, #48	; 0x30
   d4e2a:	4630      	mov	r0, r6
   d4e2c:	f7ff fabc 	bl	d43a8 <netdb_getaddrinfo>
    if (!r) {
   d4e30:	4604      	mov	r4, r0
   d4e32:	2800      	cmp	r0, #0
   d4e34:	d146      	bne.n	d4ec4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e36:	4602      	mov	r2, r0
   d4e38:	2101      	movs	r1, #1
   d4e3a:	6868      	ldr	r0, [r5, #4]
   d4e3c:	f7ff fbe8 	bl	d4610 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e40:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d4e42:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e44:	4622      	mov	r2, r4
   d4e46:	6868      	ldr	r0, [r5, #4]
   d4e48:	f7ff fbe2 	bl	d4610 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e4c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d4e4e:	4681      	mov	r9, r0
        bool ok = false;
   d4e50:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e52:	2e00      	cmp	r6, #0
   d4e54:	d036      	beq.n	d4ec4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d4e56:	2900      	cmp	r1, #0
   d4e58:	d134      	bne.n	d4ec4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d4e5a:	6873      	ldr	r3, [r6, #4]
   d4e5c:	2b02      	cmp	r3, #2
   d4e5e:	d003      	beq.n	d4e68 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d4e60:	2b0a      	cmp	r3, #10
   d4e62:	d00b      	beq.n	d4e7c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d4e64:	69f6      	ldr	r6, [r6, #28]
   d4e66:	e7f4      	b.n	d4e52 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d4e68:	f1b8 0f00 	cmp.w	r8, #0
   d4e6c:	d004      	beq.n	d4e78 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d4e6e:	6971      	ldr	r1, [r6, #20]
   d4e70:	4638      	mov	r0, r7
   d4e72:	3104      	adds	r1, #4
   d4e74:	f7ff fe07 	bl	d4a86 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d4e78:	4641      	mov	r1, r8
   d4e7a:	e7f3      	b.n	d4e64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d4e7c:	f1b9 0f00 	cmp.w	r9, #0
   d4e80:	d101      	bne.n	d4e86 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d4e82:	4649      	mov	r1, r9
   d4e84:	e7ee      	b.n	d4e64 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d4e86:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d4e88:	2210      	movs	r2, #16
   d4e8a:	a801      	add	r0, sp, #4
   d4e8c:	f000 f968 	bl	d5160 <memset>
                    a.v = 6;
   d4e90:	2306      	movs	r3, #6
   d4e92:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d4e96:	ad01      	add	r5, sp, #4
   d4e98:	f104 0308 	add.w	r3, r4, #8
   d4e9c:	3418      	adds	r4, #24
   d4e9e:	6818      	ldr	r0, [r3, #0]
   d4ea0:	6859      	ldr	r1, [r3, #4]
   d4ea2:	462a      	mov	r2, r5
   d4ea4:	c203      	stmia	r2!, {r0, r1}
   d4ea6:	3308      	adds	r3, #8
   d4ea8:	42a3      	cmp	r3, r4
   d4eaa:	4615      	mov	r5, r2
   d4eac:	d1f7      	bne.n	d4e9e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d4eae:	a901      	add	r1, sp, #4
   d4eb0:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d4eb2:	ad07      	add	r5, sp, #28
   d4eb4:	f7ff fdc8 	bl	d4a48 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d4eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d4eba:	1d3c      	adds	r4, r7, #4
   d4ebc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4ebe:	682b      	ldr	r3, [r5, #0]
   d4ec0:	7023      	strb	r3, [r4, #0]
   d4ec2:	e7de      	b.n	d4e82 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d4ec4:	9800      	ldr	r0, [sp, #0]
   d4ec6:	f7ff fa67 	bl	d4398 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d4eca:	4638      	mov	r0, r7
   d4ecc:	b015      	add	sp, #84	; 0x54
   d4ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d4ed4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d4ed4:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d4ed6:	4a03      	ldr	r2, [pc, #12]	; (d4ee4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d4ed8:	601a      	str	r2, [r3, #0]
   d4eda:	2200      	movs	r2, #0
   d4edc:	605a      	str	r2, [r3, #4]

} // spark
   d4ede:	4770      	bx	lr
   d4ee0:	2003e724 	.word	0x2003e724
   d4ee4:	000d5420 	.word	0x000d5420

000d4ee8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d4ee8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d4eea:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d4eec:	d902      	bls.n	d4ef4 <pinAvailable+0xc>
    return false;
   d4eee:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d4ef0:	b002      	add	sp, #8
   d4ef2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d4ef4:	f1a0 030b 	sub.w	r3, r0, #11
   d4ef8:	2b02      	cmp	r3, #2
   d4efa:	d81a      	bhi.n	d4f32 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d4efc:	4c17      	ldr	r4, [pc, #92]	; (d4f5c <pinAvailable+0x74>)
   d4efe:	7821      	ldrb	r1, [r4, #0]
   d4f00:	f3bf 8f5b 	dmb	ish
   d4f04:	f011 0101 	ands.w	r1, r1, #1
   d4f08:	d10b      	bne.n	d4f22 <pinAvailable+0x3a>
   d4f0a:	4620      	mov	r0, r4
   d4f0c:	9101      	str	r1, [sp, #4]
   d4f0e:	f7ff f8c6 	bl	d409e <__cxa_guard_acquire>
   d4f12:	9901      	ldr	r1, [sp, #4]
   d4f14:	b128      	cbz	r0, d4f22 <pinAvailable+0x3a>
   d4f16:	4812      	ldr	r0, [pc, #72]	; (d4f60 <pinAvailable+0x78>)
   d4f18:	f7ff fc28 	bl	d476c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4f1c:	4620      	mov	r0, r4
   d4f1e:	f7ff f8c3 	bl	d40a8 <__cxa_guard_release>
   d4f22:	4b0f      	ldr	r3, [pc, #60]	; (d4f60 <pinAvailable+0x78>)
   d4f24:	7818      	ldrb	r0, [r3, #0]
   d4f26:	f7ff faff 	bl	d4528 <hal_spi_is_enabled>
   d4f2a:	2800      	cmp	r0, #0
   d4f2c:	d1df      	bne.n	d4eee <pinAvailable+0x6>
  return true; // 'pin' is available
   d4f2e:	2001      	movs	r0, #1
   d4f30:	e7de      	b.n	d4ef0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d4f32:	2801      	cmp	r0, #1
   d4f34:	d809      	bhi.n	d4f4a <pinAvailable+0x62>
   d4f36:	f000 f859 	bl	d4fec <_Z19__fetch_global_Wirev>
   d4f3a:	2100      	movs	r1, #0
   d4f3c:	7c00      	ldrb	r0, [r0, #16]
   d4f3e:	f7ff fadb 	bl	d44f8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d4f42:	f080 0001 	eor.w	r0, r0, #1
   d4f46:	b2c0      	uxtb	r0, r0
   d4f48:	e7d2      	b.n	d4ef0 <pinAvailable+0x8>
   d4f4a:	3809      	subs	r0, #9
   d4f4c:	2801      	cmp	r0, #1
   d4f4e:	d8ee      	bhi.n	d4f2e <pinAvailable+0x46>
   d4f50:	f7ff fe78 	bl	d4c44 <_Z22__fetch_global_Serial1v>
   d4f54:	7c00      	ldrb	r0, [r0, #16]
   d4f56:	f7ff fa97 	bl	d4488 <hal_usart_is_enabled>
   d4f5a:	e7f2      	b.n	d4f42 <pinAvailable+0x5a>
   d4f5c:	2003e72c 	.word	0x2003e72c
   d4f60:	2003e730 	.word	0x2003e730

000d4f64 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f64:	2823      	cmp	r0, #35	; 0x23
{
   d4f66:	b538      	push	{r3, r4, r5, lr}
   d4f68:	4604      	mov	r4, r0
   d4f6a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d4f6c:	d80a      	bhi.n	d4f84 <pinMode+0x20>
   d4f6e:	29ff      	cmp	r1, #255	; 0xff
   d4f70:	d008      	beq.n	d4f84 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d4f72:	f7ff ffb9 	bl	d4ee8 <pinAvailable>
   d4f76:	b128      	cbz	r0, d4f84 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d4f78:	4629      	mov	r1, r5
   d4f7a:	4620      	mov	r0, r4
}
   d4f7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d4f80:	f7ff ba1a 	b.w	d43b8 <HAL_Pin_Mode>
}
   d4f84:	bd38      	pop	{r3, r4, r5, pc}

000d4f86 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d4f86:	b538      	push	{r3, r4, r5, lr}
   d4f88:	4604      	mov	r4, r0
   d4f8a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d4f8c:	f7ff fa1c 	bl	d43c8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d4f90:	28ff      	cmp	r0, #255	; 0xff
   d4f92:	d010      	beq.n	d4fb6 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d4f94:	2806      	cmp	r0, #6
   d4f96:	d804      	bhi.n	d4fa2 <digitalWrite+0x1c>
   d4f98:	234d      	movs	r3, #77	; 0x4d
   d4f9a:	fa23 f000 	lsr.w	r0, r3, r0
   d4f9e:	07c3      	lsls	r3, r0, #31
   d4fa0:	d409      	bmi.n	d4fb6 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d4fa2:	4620      	mov	r0, r4
   d4fa4:	f7ff ffa0 	bl	d4ee8 <pinAvailable>
   d4fa8:	b128      	cbz	r0, d4fb6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d4faa:	4629      	mov	r1, r5
   d4fac:	4620      	mov	r0, r4
}
   d4fae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d4fb2:	f7ff ba11 	b.w	d43d8 <HAL_GPIO_Write>
}
   d4fb6:	bd38      	pop	{r3, r4, r5, pc}

000d4fb8 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4fb8:	4770      	bx	lr
	...

000d4fbc <_Z17acquireWireBufferv>:
{
   d4fbc:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d4fbe:	2300      	movs	r3, #0
   d4fc0:	2520      	movs	r5, #32
   d4fc2:	8043      	strh	r3, [r0, #2]
   d4fc4:	2314      	movs	r3, #20
{
   d4fc6:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d4fc8:	8003      	strh	r3, [r0, #0]
   d4fca:	6085      	str	r5, [r0, #8]
   d4fcc:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4fce:	4906      	ldr	r1, [pc, #24]	; (d4fe8 <_Z17acquireWireBufferv+0x2c>)
   d4fd0:	4628      	mov	r0, r5
   d4fd2:	f000 f831 	bl	d5038 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4fd6:	4904      	ldr	r1, [pc, #16]	; (d4fe8 <_Z17acquireWireBufferv+0x2c>)
	};
   d4fd8:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d4fda:	4628      	mov	r0, r5
   d4fdc:	f000 f82c 	bl	d5038 <_ZnajRKSt9nothrow_t>
	};
   d4fe0:	60e0      	str	r0, [r4, #12]
}
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	bd38      	pop	{r3, r4, r5, pc}
   d4fe6:	bf00      	nop
   d4fe8:	000d5454 	.word	0x000d5454

000d4fec <_Z19__fetch_global_Wirev>:
{
   d4fec:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4fee:	4d0e      	ldr	r5, [pc, #56]	; (d5028 <_Z19__fetch_global_Wirev+0x3c>)
   d4ff0:	7829      	ldrb	r1, [r5, #0]
   d4ff2:	f3bf 8f5b 	dmb	ish
   d4ff6:	f011 0401 	ands.w	r4, r1, #1
{
   d4ffa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d4ffc:	d111      	bne.n	d5022 <_Z19__fetch_global_Wirev+0x36>
   d4ffe:	4628      	mov	r0, r5
   d5000:	f7ff f84d 	bl	d409e <__cxa_guard_acquire>
   d5004:	b168      	cbz	r0, d5022 <_Z19__fetch_global_Wirev+0x36>
   d5006:	a801      	add	r0, sp, #4
   d5008:	f7ff ffd8 	bl	d4fbc <_Z17acquireWireBufferv>
   d500c:	aa01      	add	r2, sp, #4
   d500e:	4621      	mov	r1, r4
   d5010:	4806      	ldr	r0, [pc, #24]	; (d502c <_Z19__fetch_global_Wirev+0x40>)
   d5012:	f7ff fe69 	bl	d4ce8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d5016:	4628      	mov	r0, r5
   d5018:	f7ff f846 	bl	d40a8 <__cxa_guard_release>
   d501c:	4804      	ldr	r0, [pc, #16]	; (d5030 <_Z19__fetch_global_Wirev+0x44>)
   d501e:	f000 f88b 	bl	d5138 <atexit>
	return wire;
}
   d5022:	4802      	ldr	r0, [pc, #8]	; (d502c <_Z19__fetch_global_Wirev+0x40>)
   d5024:	b007      	add	sp, #28
   d5026:	bd30      	pop	{r4, r5, pc}
   d5028:	2003e73c 	.word	0x2003e73c
   d502c:	2003e740 	.word	0x2003e740
   d5030:	000d4fb9 	.word	0x000d4fb9

000d5034 <_ZdlPvj>:
   d5034:	f7ff b831 	b.w	d409a <_ZdlPv>

000d5038 <_ZnajRKSt9nothrow_t>:
   d5038:	f7ff b82d 	b.w	d4096 <_Znaj>

000d503c <_ZNSt11char_traitsIcE4copyEPcPKcj>:
   d503c:	b10a      	cbz	r2, d5042 <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
   d503e:	f000 b881 	b.w	d5144 <memcpy>
   d5042:	4770      	bx	lr

000d5044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
   d5044:	b508      	push	{r3, lr}
   d5046:	680b      	ldr	r3, [r1, #0]
   d5048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
   d504c:	d302      	bcc.n	d5054 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
   d504e:	480d      	ldr	r0, [pc, #52]	; (d5084 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
   d5050:	f000 f86f 	bl	d5132 <_ZSt20__throw_length_errorPKc>
   d5054:	4293      	cmp	r3, r2
   d5056:	d90b      	bls.n	d5070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   d5058:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
   d505c:	ea4f 0042 	mov.w	r0, r2, lsl #1
   d5060:	d206      	bcs.n	d5070 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
   d5062:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
   d5066:	bf2a      	itet	cs
   d5068:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
   d506c:	6008      	strcc	r0, [r1, #0]
   d506e:	600b      	strcs	r3, [r1, #0]
   d5070:	6808      	ldr	r0, [r1, #0]
   d5072:	3001      	adds	r0, #1
   d5074:	d501      	bpl.n	d507a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
   d5076:	f000 f856 	bl	d5126 <_ZSt17__throw_bad_allocv>
   d507a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d507e:	f7ff b808 	b.w	d4092 <_Znwj>
   d5082:	bf00      	nop
   d5084:	000d5455 	.word	0x000d5455

000d5088 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
   d5088:	f850 3b08 	ldr.w	r3, [r0], #8
   d508c:	4283      	cmp	r3, r0
   d508e:	d002      	beq.n	d5096 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
   d5090:	4618      	mov	r0, r3
   d5092:	f7ff b802 	b.w	d409a <_ZdlPv>
   d5096:	4770      	bx	lr

000d5098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
   d5098:	2a01      	cmp	r2, #1
   d509a:	b510      	push	{r4, lr}
   d509c:	d102      	bne.n	d50a4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
   d509e:	780a      	ldrb	r2, [r1, #0]
   d50a0:	7002      	strb	r2, [r0, #0]
   d50a2:	bd10      	pop	{r4, pc}
   d50a4:	f7ff ffca 	bl	d503c <_ZNSt11char_traitsIcE4copyEPcPKcj>
   d50a8:	e7fb      	b.n	d50a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

000d50aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
   d50aa:	b508      	push	{r3, lr}
   d50ac:	1a52      	subs	r2, r2, r1
   d50ae:	f7ff fff3 	bl	d5098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   d50b2:	bd08      	pop	{r3, pc}

000d50b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
   d50b4:	b508      	push	{r3, lr}
   d50b6:	1a52      	subs	r2, r2, r1
   d50b8:	f7ff ffee 	bl	d5098 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
   d50bc:	bd08      	pop	{r3, pc}
	...

000d50c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
   d50c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d50c2:	4604      	mov	r4, r0
   d50c4:	4616      	mov	r6, r2
   d50c6:	460d      	mov	r5, r1
   d50c8:	b919      	cbnz	r1, d50d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
   d50ca:	b112      	cbz	r2, d50d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
   d50cc:	480d      	ldr	r0, [pc, #52]	; (d5104 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
   d50ce:	f000 f82d 	bl	d512c <_ZSt19__throw_logic_errorPKc>
   d50d2:	1b73      	subs	r3, r6, r5
   d50d4:	2b0f      	cmp	r3, #15
   d50d6:	9301      	str	r3, [sp, #4]
   d50d8:	d907      	bls.n	d50ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
   d50da:	2200      	movs	r2, #0
   d50dc:	a901      	add	r1, sp, #4
   d50de:	4620      	mov	r0, r4
   d50e0:	f7ff ffb0 	bl	d5044 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
   d50e4:	9b01      	ldr	r3, [sp, #4]
   d50e6:	6020      	str	r0, [r4, #0]
   d50e8:	60a3      	str	r3, [r4, #8]
   d50ea:	4632      	mov	r2, r6
   d50ec:	4629      	mov	r1, r5
   d50ee:	6820      	ldr	r0, [r4, #0]
   d50f0:	f7ff ffdb 	bl	d50aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
   d50f4:	9b01      	ldr	r3, [sp, #4]
   d50f6:	6822      	ldr	r2, [r4, #0]
   d50f8:	6063      	str	r3, [r4, #4]
   d50fa:	2100      	movs	r1, #0
   d50fc:	54d1      	strb	r1, [r2, r3]
   d50fe:	b002      	add	sp, #8
   d5100:	bd70      	pop	{r4, r5, r6, pc}
   d5102:	bf00      	nop
   d5104:	000d546d 	.word	0x000d546d

000d5108 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
   d5108:	b538      	push	{r3, r4, r5, lr}
   d510a:	f100 0308 	add.w	r3, r0, #8
   d510e:	6003      	str	r3, [r0, #0]
   d5110:	e9d1 5200 	ldrd	r5, r2, [r1]
   d5114:	4604      	mov	r4, r0
   d5116:	f04f 0300 	mov.w	r3, #0
   d511a:	442a      	add	r2, r5
   d511c:	4629      	mov	r1, r5
   d511e:	f7ff ffcf 	bl	d50c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
   d5122:	4620      	mov	r0, r4
   d5124:	bd38      	pop	{r3, r4, r5, pc}

000d5126 <_ZSt17__throw_bad_allocv>:
   d5126:	b508      	push	{r3, lr}
   d5128:	f7ff fad2 	bl	d46d0 <abort>

000d512c <_ZSt19__throw_logic_errorPKc>:
   d512c:	b508      	push	{r3, lr}
   d512e:	f7ff facf 	bl	d46d0 <abort>

000d5132 <_ZSt20__throw_length_errorPKc>:
   d5132:	b508      	push	{r3, lr}
   d5134:	f7ff facc 	bl	d46d0 <abort>

000d5138 <atexit>:
   d5138:	2300      	movs	r3, #0
   d513a:	4601      	mov	r1, r0
   d513c:	461a      	mov	r2, r3
   d513e:	4618      	mov	r0, r3
   d5140:	f000 b842 	b.w	d51c8 <__register_exitproc>

000d5144 <memcpy>:
   d5144:	440a      	add	r2, r1
   d5146:	4291      	cmp	r1, r2
   d5148:	f100 33ff 	add.w	r3, r0, #4294967295
   d514c:	d100      	bne.n	d5150 <memcpy+0xc>
   d514e:	4770      	bx	lr
   d5150:	b510      	push	{r4, lr}
   d5152:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5156:	f803 4f01 	strb.w	r4, [r3, #1]!
   d515a:	4291      	cmp	r1, r2
   d515c:	d1f9      	bne.n	d5152 <memcpy+0xe>
   d515e:	bd10      	pop	{r4, pc}

000d5160 <memset>:
   d5160:	4402      	add	r2, r0
   d5162:	4603      	mov	r3, r0
   d5164:	4293      	cmp	r3, r2
   d5166:	d100      	bne.n	d516a <memset+0xa>
   d5168:	4770      	bx	lr
   d516a:	f803 1b01 	strb.w	r1, [r3], #1
   d516e:	e7f9      	b.n	d5164 <memset+0x4>

000d5170 <srand>:
   d5170:	b538      	push	{r3, r4, r5, lr}
   d5172:	4b0d      	ldr	r3, [pc, #52]	; (d51a8 <srand+0x38>)
   d5174:	681d      	ldr	r5, [r3, #0]
   d5176:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d5178:	4604      	mov	r4, r0
   d517a:	b97b      	cbnz	r3, d519c <srand+0x2c>
   d517c:	2018      	movs	r0, #24
   d517e:	f7ff fa97 	bl	d46b0 <malloc>
   d5182:	4a0a      	ldr	r2, [pc, #40]	; (d51ac <srand+0x3c>)
   d5184:	4b0a      	ldr	r3, [pc, #40]	; (d51b0 <srand+0x40>)
   d5186:	63a8      	str	r0, [r5, #56]	; 0x38
   d5188:	e9c0 2300 	strd	r2, r3, [r0]
   d518c:	4b09      	ldr	r3, [pc, #36]	; (d51b4 <srand+0x44>)
   d518e:	6083      	str	r3, [r0, #8]
   d5190:	230b      	movs	r3, #11
   d5192:	8183      	strh	r3, [r0, #12]
   d5194:	2201      	movs	r2, #1
   d5196:	2300      	movs	r3, #0
   d5198:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d519c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d519e:	2200      	movs	r2, #0
   d51a0:	611c      	str	r4, [r3, #16]
   d51a2:	615a      	str	r2, [r3, #20]
   d51a4:	bd38      	pop	{r3, r4, r5, pc}
   d51a6:	bf00      	nop
   d51a8:	2003e240 	.word	0x2003e240
   d51ac:	abcd330e 	.word	0xabcd330e
   d51b0:	e66d1234 	.word	0xe66d1234
   d51b4:	0005deec 	.word	0x0005deec

000d51b8 <strlen>:
   d51b8:	4603      	mov	r3, r0
   d51ba:	f813 2b01 	ldrb.w	r2, [r3], #1
   d51be:	2a00      	cmp	r2, #0
   d51c0:	d1fb      	bne.n	d51ba <strlen+0x2>
   d51c2:	1a18      	subs	r0, r3, r0
   d51c4:	3801      	subs	r0, #1
   d51c6:	4770      	bx	lr

000d51c8 <__register_exitproc>:
   d51c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d51cc:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d5288 <__register_exitproc+0xc0>
   d51d0:	4606      	mov	r6, r0
   d51d2:	f8d8 0000 	ldr.w	r0, [r8]
   d51d6:	461f      	mov	r7, r3
   d51d8:	460d      	mov	r5, r1
   d51da:	4691      	mov	r9, r2
   d51dc:	f000 f856 	bl	d528c <__retarget_lock_acquire_recursive>
   d51e0:	4b25      	ldr	r3, [pc, #148]	; (d5278 <__register_exitproc+0xb0>)
   d51e2:	681c      	ldr	r4, [r3, #0]
   d51e4:	b934      	cbnz	r4, d51f4 <__register_exitproc+0x2c>
   d51e6:	4c25      	ldr	r4, [pc, #148]	; (d527c <__register_exitproc+0xb4>)
   d51e8:	601c      	str	r4, [r3, #0]
   d51ea:	4b25      	ldr	r3, [pc, #148]	; (d5280 <__register_exitproc+0xb8>)
   d51ec:	b113      	cbz	r3, d51f4 <__register_exitproc+0x2c>
   d51ee:	681b      	ldr	r3, [r3, #0]
   d51f0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d51f4:	6863      	ldr	r3, [r4, #4]
   d51f6:	2b1f      	cmp	r3, #31
   d51f8:	dd07      	ble.n	d520a <__register_exitproc+0x42>
   d51fa:	f8d8 0000 	ldr.w	r0, [r8]
   d51fe:	f000 f847 	bl	d5290 <__retarget_lock_release_recursive>
   d5202:	f04f 30ff 	mov.w	r0, #4294967295
   d5206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d520a:	b34e      	cbz	r6, d5260 <__register_exitproc+0x98>
   d520c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d5210:	b988      	cbnz	r0, d5236 <__register_exitproc+0x6e>
   d5212:	4b1c      	ldr	r3, [pc, #112]	; (d5284 <__register_exitproc+0xbc>)
   d5214:	b923      	cbnz	r3, d5220 <__register_exitproc+0x58>
   d5216:	f8d8 0000 	ldr.w	r0, [r8]
   d521a:	f000 f838 	bl	d528e <__retarget_lock_release>
   d521e:	e7f0      	b.n	d5202 <__register_exitproc+0x3a>
   d5220:	f44f 7084 	mov.w	r0, #264	; 0x108
   d5224:	f7ff fa44 	bl	d46b0 <malloc>
   d5228:	2800      	cmp	r0, #0
   d522a:	d0f4      	beq.n	d5216 <__register_exitproc+0x4e>
   d522c:	2300      	movs	r3, #0
   d522e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d5232:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d5236:	6863      	ldr	r3, [r4, #4]
   d5238:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d523c:	2201      	movs	r2, #1
   d523e:	409a      	lsls	r2, r3
   d5240:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d5244:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d5248:	4313      	orrs	r3, r2
   d524a:	2e02      	cmp	r6, #2
   d524c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d5250:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d5254:	bf02      	ittt	eq
   d5256:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d525a:	431a      	orreq	r2, r3
   d525c:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d5260:	6863      	ldr	r3, [r4, #4]
   d5262:	f8d8 0000 	ldr.w	r0, [r8]
   d5266:	1c5a      	adds	r2, r3, #1
   d5268:	3302      	adds	r3, #2
   d526a:	6062      	str	r2, [r4, #4]
   d526c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d5270:	f000 f80e 	bl	d5290 <__retarget_lock_release_recursive>
   d5274:	2000      	movs	r0, #0
   d5276:	e7c6      	b.n	d5206 <__register_exitproc+0x3e>
   d5278:	2003e7e0 	.word	0x2003e7e0
   d527c:	2003e754 	.word	0x2003e754
   d5280:	00000000 	.word	0x00000000
   d5284:	000d46b1 	.word	0x000d46b1
   d5288:	2003e2a4 	.word	0x2003e2a4

000d528c <__retarget_lock_acquire_recursive>:
   d528c:	4770      	bx	lr

000d528e <__retarget_lock_release>:
   d528e:	4770      	bx	lr

000d5290 <__retarget_lock_release_recursive>:
   d5290:	4770      	bx	lr

000d5292 <link_code_end>:
	...

000d5294 <dynalib_user>:
   d5294:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d52a4:	0000 0000 2e2d 2e2e 2d00 2d2e 002e 2e2e     ....-....-.-....
   d52b4:	2e2d 2e00 2e2e 002e 2d2e 2d2d 2e00 2e2d     -........---..-.
   d52c4:	002e 2d2e 2e2d 2d00 2e2d 002d 2e2e 2d2e     ...--..--.-....-
   d52d4:	2d00 2e2e 002d 2e2d 2d2d 2d00 2e2d 002e     .-..-.-.--.--...

000d52e4 <_ZTVN5spark13EthernetClassE>:
	...
   d52ec:	474f 000d 4745 000d 473b 000d 4731 000d     OG..EG..;G..1G..
   d52fc:	4725 000d 4719 000d 4dc9 000d 4dd1 000d     %G...G...M...M..
   d530c:	470d 000d 4705 000d 46fb 000d 46f1 000d     .G...G...F...F..
   d531c:	4e01 000d 7061 0070 5925 252d 2d6d 6425     .N..app.%Y-%m-%d
   d532c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
   d533c:	6d69 0065                                   ime.

000d5340 <_ZTV9IPAddress>:
	...
   d5348:	49c9 000d 49b9 000d 49bb 000d               .I...I...I..

000d5354 <_ZTV9USBSerial>:
	...
   d535c:	4aa1 000d 4b09 000d 4adf 000d 47b5 000d     .J...K...J...G..
   d536c:	4ad1 000d 4aa3 000d 4ab3 000d 4b03 000d     .J...J...J...K..
   d537c:	4ac3 000d 4a9b 000d                         .J...J..

000d5384 <_ZTV11USARTSerial>:
	...
   d538c:	4b9d 000d 4c0b 000d 4be3 000d 47b5 000d     .K...L...K...G..
   d539c:	4bb3 000d 4bcf 000d 4bc1 000d 4bdd 000d     .K...K...K...K..
   d53ac:	4b9f 000d 4ba5 000d                         .K...K..

000d53b4 <_ZTV7TwoWire>:
	...
   d53bc:	4c91 000d 4cdb 000d 4cb3 000d 4c93 000d     .L...L...L...L..
   d53cc:	4cbb 000d 4cc3 000d 4ccb 000d 4cd3 000d     .L...L...L...L..

000d53dc <_ZTVN5spark9WiFiClassE>:
	...
   d53e4:	4d6b 000d 4d61 000d 4d57 000d 4d0d 000d     kM..aM..WM...M..
   d53f4:	4d4b 000d 4d3f 000d 4dc9 000d 4dd1 000d     KM..?M...M...M..
   d5404:	4d33 000d 4d2b 000d 4d21 000d 4d17 000d     3M..+M..!M...M..
   d5414:	4e01 000d                                   .N..

000d5418 <_ZTVN5spark12NetworkClassE>:
	...
   d5420:	4d89 000d 4d93 000d 4d9d 000d 4da7 000d     .M...M...M...M..
   d5430:	4db1 000d 4dbd 000d 4dc9 000d 4dd1 000d     .M...M...M...M..
   d5440:	4dd9 000d 4de5 000d 4ded 000d 4df7 000d     .M...M...M...M..
   d5450:	4e01 000d                                   .N..

000d5454 <_ZSt7nothrow>:
   d5454:	6200 7361 6369 735f 7274 6e69 3a67 5f3a     .basic_string::_
   d5464:	5f4d 7263 6165 6574 6200 7361 6369 735f     M_create.basic_s
   d5474:	7274 6e69 3a67 5f3a 5f4d 6f63 736e 7274     tring::_M_constr
   d5484:	6375 2074 756e 6c6c 6e20 746f 7620 6c61     uct null not val
   d5494:	6469                                         id.

000d5497 <link_const_variable_data_end>:
	...

000d5498 <link_constructors_location>:
   d5498:	000d419d 	.word	0x000d419d
   d549c:	000d4759 	.word	0x000d4759
   d54a0:	000d4781 	.word	0x000d4781
   d54a4:	000d47a5 	.word	0x000d47a5
   d54a8:	000d4849 	.word	0x000d4849
   d54ac:	000d4859 	.word	0x000d4859
   d54b0:	000d4875 	.word	0x000d4875
   d54b4:	000d4d75 	.word	0x000d4d75
   d54b8:	000d4ed5 	.word	0x000d4ed5

000d54bc <link_constructors_end>:
   d54bc:	00000000 	.word	0x00000000
